<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for peri subsystem moredump
  Chip hash: daac


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="peri">
  <block name="bbic_pad_control" comment="Auto-generated from front_end.py">
    <register addr="c3000000" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL0" comment="Control register for pad RFIC_CTRL0"/>
    <register addr="c3000004" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL1" comment="Control register for pad RFIC_CTRL1"/>
  </block>
  <block name="bt_bb_bsp" comment="Bluetooth radio control/status registers">
    <register addr="c5000000" rw_flags="R" width="4" name="BT_CLKGEN_SYSTEM_TIME" comment="The current microsecond system time."/>
    <register addr="c5000004" rw_flags="RW" width="1" name="BT_CLKGEN_ENABLES" comment="This register enables the core clocks on the chip. When a corresponding bit is set, the clock is enabled, regardless of any corresponding clock request"/>
    <register addr="c5000008" rw_flags="R" width="4" name="BT_DEBUG" comment="BT Debug readback."/>
    <register addr="c500000c" rw_flags="RW" width="1" name="BT_DEBUG_MUX" comment="BT Debug Mux Selection."/>
    <register addr="c5000010" rw_flags="RW" width="4" name="BT_WBREE_CONFIG" comment="Enables Wibree featues."/>
    <register addr="c5000014" rw_flags="RW" width="4" name="BT_WBREE_CONFIG_EXT" comment="Extra Wibree controls."/>
    <register addr="c5000018" rw_flags="RW" width="2" name="BT_WBREE_CONFIG_2M" comment="2M Wibree controls."/>
    <register addr="c500001c" rw_flags="RW" width="4" name="BT_WBREE_CONFIG_ANGLE" comment="AOD /AOAWibree controls."/>
    <register addr="c5000020" rw_flags="RW" width="4" name="BT_WBREE_SUPP_ENABLES" comment="More AOD /AOA Wibree controls."/>
    <register addr="c5000024" rw_flags="RW" width="4" name="BT_WBREE_LEN_PARAMS" comment="Configure BLE length paramters"/>
    <register addr="c5000028" rw_flags="RW" width="2" name="BT_LEN_PARAMS" comment="Configure BR, EDR length paramters"/>
    <register addr="c500002c" rw_flags="RW" width="2" name="BT_RAWMODE_CONFIG" comment="Enables RAW bitstreaming features (for Ant, Zigbee and future devs)."/>
    <register addr="c5000030" rw_flags="RW" width="4" name="BT_LLR_TRIGGER_LSW" comment="LLR Access Code to transmit or receive LSW"/>
    <register addr="c5000034" rw_flags="RW" width="4" name="BT_LLR_TRIGGER_MSW" comment="LLR Access Code to transmit or receive MSW"/>
    <register addr="c5000038" rw_flags="RW" width="4" name="BT_AES_ACL_CFG_1" comment="Enable BT AES and AES CCM modes on ACL packets"/>
    <register addr="c500003c" rw_flags="RW" width="4" name="BT_AES_ACL_CFG_2" comment="Enable BT AES and AES CCM modes on ACL packets"/>
    <register addr="c5000040" rw_flags="RW" width="4" name="BT_AES_ACL_CFG_3" comment="Enable BT AES and AES CCM modes on ACL packets"/>
    <register addr="c5000044" rw_flags="RW" width="4" name="BT_AES_ACL23_CFG_1" comment="Enable BT AES and AES CCM modes on EDR ACL packets"/>
    <register addr="c5000048" rw_flags="RW" width="4" name="BT_AES_ACL23_CFG_2" comment="Enable BT AES and AES CCM modes on EDR ACL packets"/>
    <register addr="c500004c" rw_flags="RW" width="4" name="BT_AES_ACL23_CFG_3" comment="Enable BT AES and AES CCM modes on EDR ACL packets"/>
    <register addr="c5000050" rw_flags="RW" width="2" name="BT_AES_ACL23_CFG_4" comment="Enable BT AES and AES CCM modes on EDR ACL packets"/>
    <register addr="c5000054" rw_flags="RW" width="4" name="BT_AES_ESCO_CFG" comment="Enable BT AES modes on ESCO packets"/>
    <register addr="c5000058" rw_flags="RW" width="4" name="BT_AES_ESCO23_CFG" comment="Enable BT AES modes on EDR ESCO packets"/>
    <register addr="c500005c" rw_flags="RW" width="4" name="BT_AES_MISC_CFG" comment="Miscellaneous BT AES config"/>
    <register addr="c5000060" rw_flags="RW" width="4" name="BT_CONFIG_TX" comment="BT Config TX on Bitstream processing control"/>
    <register addr="c5000064" rw_flags="W" width="1" name="BT_TX_SW_ABORT" comment="Force Tx Bitstream processing abort - Write sensitive"/>
    <register addr="c5000068" rw_flags="RW" width="4" name="BT_TX_AUTO_START_TIME" comment="Automatically turn on the Tx Bitstream digital at this time when TX_AUTO_START_EN is set."/>
    <register addr="c500006c" rw_flags="RW" width="1" name="BT_TX_DMA_START_TIME" comment="Automatically turn on the buf ctrl this number of uS after the auto start when TX_AUTO_START_EN is set."/>
    <register addr="c5000070" rw_flags="RW" width="4" name="BT_CONFIG_RX" comment="BT Config RX on Bitstream processing control"/>
    <register addr="c5000074" rw_flags="W" width="1" name="BT_RX_SW_ABORT" comment="Force Rx Bitstream processing abort - Write sensitive"/>
    <register addr="c5000078" rw_flags="RW" width="4" name="BT_RX_AUTO_START_TIME" comment="Automatically turn on the Rx Bitstream digital at this time when RX_AUTO_START_EN is set."/>
    <register addr="c500007c" rw_flags="RW" width="2" name="BT_CONFIG_COEX" comment="BT Config Coex Masking "/>
    <register addr="c5000080" rw_flags="R" width="4" name="BT_RX_COEX_ENABLE_STATUS" comment="BT RX Enable Status, for Coex"/>
    <register addr="c5000084" rw_flags="R" width="4" name="BT_RX_COEX_EVENT_TYPE_BIT" comment="Latched version of event bit, cleared only by explicit coex firmware rst."/>
    <register addr="c5000088" rw_flags="R" width="4" name="BT_TX_COEX_ENABLE_STATUS" comment="BT TX Enable Status, for Coex"/>
    <register addr="c500008c" rw_flags="R" width="1" name="BT_TX_COEX_EVENT_TYPE_BIT" comment="Latched version of event bit, cleared only by explicit coex firmware rst."/>
    <register addr="c5000090" rw_flags="W" width="1" name="BT_TXRX_COEX_ENABLE_STATUS_RST" comment="Write sensitive register to clear, enable latch and coex event_bit mirror."/>
    <register addr="c5000094" rw_flags="RW" width="1" name="BT_SPEEDY_RST" comment="BT reset on Bitstream processing control"/>
    <register addr="c5000098" rw_flags="RW" width="4" name="BT_SPEEDY_S_MON_CTRL" comment="BT Speedy Slave Monitor Ctrl"/>
    <register addr="c500009c" rw_flags="RW" width="4" name="BT_SPEEDY_M_MON_CTRL" comment="BT Speedy Master Monitor Ctrl"/>
    <register addr="c50000a0" rw_flags="R" width="4" name="BT_SPEEDY_MON_STATUS" comment="BT Speedy Monitor Status"/>
    <register addr="c50000a4" rw_flags="R" width="1" name="BT_SPEEDY_INT_STATUS" comment="BT Speedy Monitor Status"/>
    <register addr="c50000a8" rw_flags="RW" width="2" name="BT_BUF_CTRL" comment="BT Axi Buffer Ctrl"/>
    <register addr="c50000ac" rw_flags="R" width="4" name="BT_BUF_STATUS" comment="BT Axi Buffer Status"/>
    <register addr="c50000b0" rw_flags="R" width="4" name="BT_BUF_STATUS2" comment="BT Axi Buffer Status bits"/>
    <register addr="c50000b4" rw_flags="RW" width="1" name="BT_TX_LINK_TYPE" comment=""/>
    <register addr="c50000b8" rw_flags="RW" width="1" name="BT_TX_CORRUPT_CRC" comment="Corrupt transmitted CRC by inverting for BLE/BDR/EDR"/>
    <register addr="c50000bc" rw_flags="R" width="4" name="BT_TX_CRC" comment="Transmitted BLE/BR/EDR CRC"/>
    <register addr="c50000c0" rw_flags="RW" width="2" name="BT_TX_PACKET_HEADER" comment="Bluetooth packet header data."/>
    <register addr="c50000c4" rw_flags="RW" width="2" name="BT_TX_PAYLOAD_HEADER" comment="Bluetooth payload header data."/>
    <register addr="c50000c8" rw_flags="RW" width="2" name="BT_TX_PAYLOAD_LENGTH" comment="Bluetooth payload length, used by the state machine to seperate from payload_header field changes"/>
    <register addr="c50000cc" rw_flags="RW" width="4" name="BT_TX_VOICE_BUFFER" comment="Buffer Handle for voice data"/>
    <register addr="c50000d0" rw_flags="RW" width="4" name="BT_TX_DATA_BUFFER" comment="Buffer Handle for data"/>
    <register addr="c50000d4" rw_flags="RW" width="4" name="BT_TX_PACKET_CONFIG1" comment=""/>
    <register addr="c50000d8" rw_flags="RW" width="4" name="BT_TX_WBREE_SUPP" comment="Supplemental field for AoA Data packets."/>
    <register addr="c50000dc" rw_flags="RW" width="2" name="BT_TX_WBREE_EXT_HEADER" comment="Advertising extensions field and supplemental field for Data packets."/>
    <register addr="c50000e0" rw_flags="RW" width="4" name="BT_TX_WBREE_ACCESS_ADDR" comment="Wibree transmit sync word"/>
    <register addr="c50000e4" rw_flags="RW" width="2" name="BT_TX_WBREE_HDR_DATA" comment="Wibree tranamit header - this is what is sent on air"/>
    <register addr="c50000e8" rw_flags="RW" width="1" name="BT_TX_WBREE_LENGTH" comment="Seoerate the length field (use for ctrl), in case field moves"/>
    <register addr="c50000ec" rw_flags="RW" width="4" name="BT_TX_WBREE_CRC_SEED" comment="Seed value for Wibree CRC and ICV checksum"/>
    <register addr="c50000f0" rw_flags="RW" width="4" name="BT_TX_WBREE_BUFFER" comment="Buffer handle for Wibree data"/>
    <register addr="c50000f4" rw_flags="RW" width="2" name="BT_TX_WBREE_HDR_ADV_MASK" comment="Wibree transmit common adv extended header decoding masks"/>
    <register addr="c50000f8" rw_flags="RW" width="4" name="BT_TX_WBREE_HDR_ADV_TYPE_DECODE" comment="Wibree transmit common adv extended header type values"/>
    <register addr="c50000fc" rw_flags="RW" width="2" name="BT_TX_ESCO_NUM_VOICE_BYTES" comment=""/>
    <register addr="c5000100" rw_flags="R" width="1" name="BT_TX_STATE" comment=""/>
    <register addr="c5000104" rw_flags="R" width="1" name="BT_TX_EVENT_TYPE" comment="Status of last transmitted packet"/>
    <register addr="c5000108" rw_flags="R" width="1" name="BT_TX_EVENT_TYPE_BIT" comment="Latch of Status/Errors of last transmitted packet - each bit corresponds to event type value"/>
    <register addr="c500010c" rw_flags="R" width="4" name="BT_TX_STATE_STATUS_BIT" comment="Latch of TX State Status - each bit corresponds to state we've transitioned through"/>
    <register addr="c5000110" rw_flags="RW" width="2" name="BT_TX_RAWMODE_LENGTH" comment="Length of RAW frame to transmit in bytes (including access code, etc.). For example, a standard fixed frame length should be 18."/>
    <register addr="c5000114" rw_flags="RW" width="2" name="BT_TX_LLR_CONFIG" comment="Transmit LLR config : "/>
    <register addr="c5000118" rw_flags="RW" width="2" name="BT_TX_LLR_REPETTIONS" comment="Number of times to repeat the LLR Trigger code"/>
    <register addr="c500011c" rw_flags="RW" width="1" name="BT_TX_WAIT_FOR_RFIC_DONE" comment="Wait for the TxDone acknowledgement to come back from the RFIC before firing the end of packet interrupt"/>
    <register addr="c5000120" rw_flags="RW" width="4" name="BT_TX_DATA_FETCH" comment="BT Config Data Fetch for TX on Bitstream processing control"/>
    <register addr="c5000124" rw_flags="RW" width="1" name="BT_RX_MEMBER_ADDRESS" comment="Receive member address"/>
    <register addr="c5000128" rw_flags="RW" width="2" name="BT_RX_LINK_TYPE" comment="Bluetooth link type"/>
    <register addr="c500012c" rw_flags="RW" width="4" name="BT_RX_FHS_BUFFER" comment="MMU FHS buffer handle"/>
    <register addr="c5000130" rw_flags="RW" width="4" name="BT_RX_LMP_BUFFER" comment="MMU LMP  buffer handle"/>
    <register addr="c5000134" rw_flags="RW" width="4" name="BT_RX_VOICE_BUFFER" comment="MMU Voice buffer handle"/>
    <register addr="c5000138" rw_flags="RW" width="4" name="BT_RX_DATA_BUFFER" comment="MMU Data buffer handle"/>
    <register addr="c500013c" rw_flags="RW" width="2" name="BT_RX_FHS_BUF_SIZE" comment="MMU FHS buffer size  "/>
    <register addr="c5000140" rw_flags="RW" width="2" name="BT_RX_LMP_BUF_SIZE" comment="MMU LMP buffer size  "/>
    <register addr="c5000144" rw_flags="RW" width="2" name="BT_RX_VOICE_BUF_SIZE" comment="MMU Voice buffer size"/>
    <register addr="c5000148" rw_flags="RW" width="2" name="BT_RX_DATA_BUF_SIZE" comment="MMU Data buffer size"/>
    <register addr="c500014c" rw_flags="RW" width="4" name="BT_RX_CONFIG" comment=""/>
    <register addr="c5000150" rw_flags="RW" width="4" name="BT_RX_EVENT_CONFIG" comment=""/>
    <register addr="c5000154" rw_flags="RW" width="4" name="BT_RX_OVERRUN_DISCARD" comment="Options for configuring overrrun and discard handling"/>
    <register addr="c5000158" rw_flags="RW" width="4" name="BT_RX_PACKET_CONFIG1" comment="Receive packet configuration - part1"/>
    <register addr="c500015c" rw_flags="RW" width="2" name="BT_RX_ESCO_NUM_VOICE_BYTES" comment=""/>
    <register addr="c5000160" rw_flags="RW" width="1" name="BT_RX_MR_DEBUG_CONFIG" comment="Enable EDR debug - non zero"/>
    <register addr="c5000164" rw_flags="R" width="1" name="BT_RX_STATE" comment="Debug register - current state of rx_control"/>
    <register addr="c5000168" rw_flags="R" width="1" name="BT_RX_FEC_NUM_CORR_HEADER_ERRORS" comment="FEC correctable header error count"/>
    <register addr="c500016c" rw_flags="R" width="2" name="BT_RX_PACKET_HEADER" comment="Received packet header"/>
    <register addr="c5000170" rw_flags="R" width="2" name="BT_RX_PAYLOAD_HEADER" comment="Received payload header"/>
    <register addr="c5000174" rw_flags="RW" width="1" name="BT_RX_PAYLOAD_LENGTH_FIELD" comment="ctrl to determine length field in received payload header, Reset to standard payload header length field being bits 12:3"/>
    <register addr="c5000178" rw_flags="R" width="2" name="BT_RX_PAYLOAD_NUM_VOICE_BYTES" comment="Number of voice bytes received"/>
    <register addr="c500017c" rw_flags="R" width="2" name="BT_RX_PAYLOAD_NUM_DATA_BYTES" comment="Number of data bytes received"/>
    <register addr="c5000180" rw_flags="R" width="1" name="BT_RX_FEC_NUM_CORR_ERRORS" comment="FEC correctable error count"/>
    <register addr="c5000184" rw_flags="R" width="1" name="BT_RX_FEC_NUM_UNCORR_ERRORS" comment="FEC un-correctable error count"/>
    <register addr="c5000188" rw_flags="W" width="1" name="BT_RX_EVENT_CLEAR" comment="Write to clear receive event and interrupt without disabling the RX - Write sensitive"/>
    <register addr="c500018c" rw_flags="R" width="1" name="BT_RX_EVENT_TYPE" comment="Received event type"/>
    <register addr="c5000190" rw_flags="R" width="4" name="BT_RX_EVENT_TYPE_BIT" comment="Received event type - Latch of bits for each error/event type"/>
    <register addr="c5000194" rw_flags="R" width="4" name="BT_RX_STATE_STATUS_BIT" comment="Latch of RX State Status - each bit corresponds to state we've transitioned through"/>
    <register addr="c5000198" rw_flags="R" width="4" name="BT_RX_WBREE_HDR_DATA" comment="Wibree received header"/>
    <register addr="c500019c" rw_flags="RW" width="2" name="BT_RX_WBREE_HDR_STP" comment="Wibree received header SP field decoding"/>
    <register addr="c50001a0" rw_flags="RW" width="2" name="BT_RX_WBREE_HDR_ADV_MASK" comment="Wibree received common adv extended header decoding masks"/>
    <register addr="c50001a4" rw_flags="RW" width="2" name="BT_RX_WBREE_HDR_ADV_TYPE_DECODE" comment="Wibree received common adv extended header type values"/>
    <register addr="c50001a8" rw_flags="RW" width="1" name="BT_RX_WBREE_LENGTH_FIELD" comment="ctrl to determine where to look for length field in received payload header, Reset to standard payload header length field being bits 8:0"/>
    <register addr="c50001ac" rw_flags="R" width="1" name="BT_RX_WBREE_SUPP_DATA" comment="Wibree received SuppInfo"/>
    <register addr="c50001b0" rw_flags="RW" width="4" name="BT_RX_WBREE_CRC_SEED" comment="Wibree CRC seed"/>
    <register addr="c50001b4" rw_flags="RW" width="4" name="BT_RX_WBREE_BUFFER" comment="Wibree receive buffer handle"/>
    <register addr="c50001b8" rw_flags="RW" width="2" name="BT_RX_WBREE_BUF_SIZE" comment="Wibree receive buffer size"/>
    <register addr="c50001bc" rw_flags="RW" width="4" name="BT_RX_WBREE_SUPP_BUFFER" comment="Wibree receive Supplemental buffer handle"/>
    <register addr="c50001c0" rw_flags="RW" width="2" name="BT_RX_WBREE_SUPP_BUF_SIZE" comment="Wibree receive supp buffer size"/>
    <register addr="c50001c4" rw_flags="RW" width="1" name="BT_RX_WBREE_SUPP_CRC_FAIL" comment="Enable reception of Supplementals on CRC Fail"/>
    <register addr="c50001c8" rw_flags="RW" width="4" name="BT41_ZL_NONCE_CFG" comment="Set zero flag on Rcv Nonce for zero length packets received with following types:"/>
    <register addr="c50001cc" rw_flags="R" width="4" name="AES_CCM_DATA" comment="Received encrypted MIC"/>
    <register addr="c50001d0" rw_flags="R" width="4" name="AES_EXP_CCM_DATA" comment="Expected encrypted MIC"/>
    <register addr="c50001d4" rw_flags="RW" width="1" name="BT41_SNIFF_MODE" comment="Prevent decryption of incoming data stream"/>
    <register addr="c50001d8" rw_flags="RW" width="2" name="BT_RX_RAWMODE_LENGTH" comment="Raw Mode packet length (for receive state machine)"/>
    <register addr="c50001dc" rw_flags="RW" width="1" name="BT_RX_WAIT_FOR_RFIC_DONE" comment="Wait for the RxDone acknowledgement to come back from the RFIC before firing the end of packet interrupt"/>
    <register addr="c50001e0" rw_flags="RW" width="1" name="BT_RX_DISABLE_RF_PAYLOAD_MSG" comment="Option to allow the disabling of the payload length being sent for MLSE/MLE"/>
    <register addr="c50001e4" rw_flags="RW" width="1" name="BT_RX_SYNC_INT_EN" comment="Enable generation of interrupt on Sync"/>
    <register addr="c50001e8" rw_flags="RW" width="1" name="BT_RX_MLE_ACL_PAYLOAD_DELAY" comment="Number of clock cycles to delay sending the ACL payload to the RFIC. This is used to correct a potential timing issue (see SB-17048)"/>
    <register addr="c50001ec" rw_flags="R" width="4" name="BT_RX_CRC_HASH" comment="Debug - BT or BLE HASH register result on RX, should be 0 on successful packet"/>
    <register addr="c50001f0" rw_flags="R" width="4" name="BT_RX_CRC_AIR" comment="Debug - BT or BLE CRC received on the AIR for RX"/>
    <register addr="c50001f4" rw_flags="RW" width="1" name="BT_RX_SOFTDECISION_CTRL" comment="Controls for Soft Decision usage"/>
    <register addr="c50001f8" rw_flags="R" width="2" name="BT_RX_SOFTDECISION_STATUS" comment="Status of soft correction CRC analysis"/>
    <register addr="c50001fc" rw_flags="RW" width="4" name="BT_TXRX_MASTER_CLOCK" comment="Master clock seed for BT encryption LSFR"/>
    <register addr="c5000200" rw_flags="RW" width="4" name="BT_TXRX_MASTER_ADDRESS_LSW" comment="Master address seed for BT encryption LSFR"/>
    <register addr="c5000204" rw_flags="RW" width="2" name="BT_TXRX_MASTER_ADDRESS_MSW" comment="Master address seed for BT encryption LSFR"/>
    <register addr="c5000208" rw_flags="RW" width="4" name="BT_TXRX_ACCESS_CODE_LAP" comment="Lower 24 bits of BT address to generate access code"/>
    <register addr="c500020c" rw_flags="RW" width="1" name="BT_TXRX_WHITEN_ACTIVE" comment="Enable data whitening"/>
    <register addr="c5000210" rw_flags="RW" width="1" name="BT_TXRX_WHITEN_SEED" comment="Whitener seed for BT and Wibree packets"/>
    <register addr="c5000214" rw_flags="RW" width="1" name="BT_TXRX_ENCRYPT_ACTIVE" comment="Enable BT encryption"/>
    <register addr="c5000218" rw_flags="RW" width="4" name="BT_TXRX_ENCRYPT_KEY[0]" comment="BT encryption key"/>
    <register addr="c500021c" rw_flags="RW" width="4" name="BT_TXRX_ENCRYPT_KEY[1]" comment="BT encryption key"/>
    <register addr="c5000220" rw_flags="RW" width="4" name="BT_TXRX_ENCRYPT_KEY[2]" comment="BT encryption key"/>
    <register addr="c5000224" rw_flags="RW" width="4" name="BT_TXRX_ENCRYPT_KEY[3]" comment="BT encryption key"/>
    <register addr="c5000228" rw_flags="RW" width="1" name="BT_TXRX_HEC_CRC_SEED" comment="Transmit and receive Header Error CRC seed"/>
    <register addr="c500022c" rw_flags="RW" width="1" name="BT_TXRX_AES_DBG_ADDR" comment="Select data to be read in AES_DBG_DATA"/>
    <register addr="c5000230" rw_flags="R" width="2" name="BT_TXRX_AES_DBG_DATA" comment="P  and  K debug data"/>
    <register addr="c5000234" rw_flags="RW" width="4" name="BT_TXRX_AES_KEY[0]" comment="AES key"/>
    <register addr="c5000238" rw_flags="RW" width="4" name="BT_TXRX_AES_KEY[1]" comment="AES key"/>
    <register addr="c500023c" rw_flags="RW" width="4" name="BT_TXRX_AES_KEY[2]" comment="AES key"/>
    <register addr="c5000240" rw_flags="RW" width="4" name="BT_TXRX_AES_KEY[3]" comment="AES key"/>
    <register addr="c5000244" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[0]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000248" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[1]" comment="AES Nonce to be encrypted"/>
    <register addr="c500024c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[2]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000250" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[3]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000254" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[4]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000258" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[5]" comment="AES Nonce to be encrypted"/>
    <register addr="c500025c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[6]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000260" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[7]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000264" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[8]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000268" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[9]" comment="AES Nonce to be encrypted"/>
    <register addr="c500026c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[10]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000270" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[11]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000274" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE[12]" comment="AES Nonce to be encrypted"/>
    <register addr="c5000278" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[0]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c500027c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[1]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000280" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[2]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000284" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[3]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000288" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[4]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c500028c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[5]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000290" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[6]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000294" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[7]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c5000298" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[8]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c500029c" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[9]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c50002a0" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[10]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c50002a4" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[11]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c50002a8" rw_flags="RW" width="1" name="BT_TXRX_AES_NONCE2[12]" comment="AES Additional Nonce to be encrypted"/>
    <register addr="c50002ac" rw_flags="RW" width="2" name="BT_TXRX_AES_CCM_HDR_EN1" comment="Select which bits of header make up B0 key for AES-CCM"/>
    <register addr="c50002b0" rw_flags="RW" width="2" name="BT_TXRX_AES_CCM_HDR_EN2" comment="Select which bits of header make up B0 key for AES-CCM"/>
    <register addr="c50002b4" rw_flags="RW" width="1" name="BT_TXRX_AES_CCM_FLAG_B0" comment="Aes-Ccm B0 flag"/>
    <register addr="c50002b8" rw_flags="RW" width="1" name="BT_TXRX_AES_CCM_FLAG_C0" comment="Aes-Ccm C0 flag"/>
    <register addr="c50002bc" rw_flags="RW" width="2" name="BT_TXRX_AES_CONFIG" comment="AES config CMM select / Nonce Select"/>
    <register addr="c50002c0" rw_flags="RW" width="1" name="BT_TXRX_HOP_SEQ_TYPE" comment="Configure HOP sequence type"/>
    <register addr="c50002c4" rw_flags="RW" width="4" name="BT_TXRX_HOP_UAP_LAP" comment="Upper and Lower BT address to determine frequecy hopping sequence"/>
    <register addr="c50002c8" rw_flags="RW" width="4" name="BT_TXRX_HOP_CLOCK" comment="Master clock"/>
    <register addr="c50002cc" rw_flags="RW" width="1" name="BT_TXRX_HOP_Y1" comment="Y1 from BT specification,"/>
    <register addr="c50002d0" rw_flags="RW" width="1" name="BT_TXRX_HOP_K_SEL" comment="K from BT specification, 0: Koffset=24, 1: Koffset=8"/>
    <register addr="c50002d4" rw_flags="RW" width="1" name="BT_TXRX_HOP_N" comment="Number of channels in adapted hop sequence"/>
    <register addr="c50002d8" rw_flags="RW" width="1" name="BT_TXRX_HOP_F" comment="Adapted Hop sequence mapping (F from BT specification)"/>
    <register addr="c50002dc" rw_flags="R" width="2" name="BT_TXRX_HOP_INDEX_PRE_MOD" comment="Index of required hop before final modulus. Note, value is valid 3 cycles of CPU clock after setting the last input value."/>
    <register addr="c50002e0" rw_flags="R" width="1" name="BT_TXRX_HOP_INDEX" comment="Index of required hop (0 to 78 or 0 to 22)"/>
    <register addr="c50002e4" rw_flags="R" width="4" name="BT_TXRX_HOP_STATUS" comment="New Index register combining both values and a VALID bit"/>
  </block>
  <block name="dma_aes" comment="T10 AES control and status registers">
    <register addr="c5500000" rw_flags="RW" width="4" name="AES_KEY_ADD" comment="KEY address "/>
    <register addr="c5500004" rw_flags="RW" width="2" name="AES_KEY_LEN" comment="KEY Length"/>
    <register addr="c5500008" rw_flags="RW" width="2" name="AES_KEY_OFF" comment="KEY OFFSET"/>
    <register addr="c550000c" rw_flags="RW" width="4" name="AES_SEED_ADD" comment="SEED address "/>
    <register addr="c5500010" rw_flags="RW" width="4" name="AES_DATA1_ADD" comment="DATA 1 (first of the Scatther Gather data sources)address "/>
    <register addr="c5500014" rw_flags="RW" width="2" name="AES_DATA1_LEN" comment="DATA 1 Length"/>
    <register addr="c5500018" rw_flags="RW" width="2" name="AES_DATA1_OFF" comment="DATA1 OFFSET"/>
    <register addr="c550001c" rw_flags="RW" width="4" name="AES_DATA2_ADD" comment="DATA 2 (Second of the Scatther Gather data sources)address "/>
    <register addr="c5500020" rw_flags="RW" width="2" name="AES_DATA2_LEN" comment="DATA 2 Length"/>
    <register addr="c5500024" rw_flags="RW" width="2" name="AES_DATA2_OFF" comment="DATA2 OFFSET"/>
    <register addr="c5500028" rw_flags="RW" width="4" name="AES_DEST1_ADD" comment="DEST 1 (first of the Scatther Gather data destination) address "/>
    <register addr="c550002c" rw_flags="RW" width="2" name="AES_DEST1_LEN" comment="DEST 1 Length"/>
    <register addr="c5500030" rw_flags="RW" width="2" name="AES_DEST1_OFF" comment="DEST 1 OFFSET"/>
    <register addr="c5500034" rw_flags="RW" width="4" name="AES_DEST2_ADD" comment="DEST 2 (Second of the Scatther Gather data destination) address "/>
    <register addr="c5500038" rw_flags="RW" width="2" name="AES_DEST2_LEN" comment="DEST 2 Length"/>
    <register addr="c550003c" rw_flags="RW" width="2" name="AES_DEST2_OFF" comment="DEST 2 OFFSET"/>
    <register addr="c5500040" rw_flags="RW" width="2" name="AES_STARTUP_SEQ" comment="Configure AES setup conditions"/>
    <register addr="c5500044" rw_flags="RW" width="2" name="AES_MAIN_LOOP_SEQ" comment="Configure AES Main loop operation"/>
    <register addr="c5500048" rw_flags="RW" width="2" name="AES_CONTROL" comment="AES control and congiuration"/>
    <register addr="c550004c" rw_flags="RW" width="4" name="AES_COMP_REF_ADD" comment="The RAM address of Goldern reference , used for BLE privacy nd for CAM operations"/>
    <register addr="c5500050" rw_flags="RW" width="4" name="AES_COMP_MASK_ADD" comment="The RAM address of Mask for Goldern reference"/>
    <register addr="c5500054" rw_flags="RW" width="4" name="AES_COMP_ADD" comment="RAM address to store index of a match"/>
    <register addr="c5500058" rw_flags="RW" width="1" name="AES_INT_EN" comment="Interrupt sources enable."/>
    <register addr="c550005c" rw_flags="R" width="1" name="AES_INT_STATUS" comment="Status of Interrupt sources."/>
    <register addr="c5500060" rw_flags="W" width="1" name="AES_INT_CLEAR" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c5500064" rw_flags="R" width="1" name="AES_STATUS" comment="Status of AES engine."/>
  </block>
  <block name="mif_axi_monitor" comment="Monitor transactions on the AXI bus.">
    <register addr="c0200000" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[0]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200004" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[1]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200008" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[2]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c020000c" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[3]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200010" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[4]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200014" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[5]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200018" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[6]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c020001c" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[7]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200020" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[8]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200024" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[9]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200028" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[10]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c020002c" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[11]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200030" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[12]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200034" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[13]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200038" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[14]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c020003c" rw_flags="RW" width="4" name="MIF_AXI_MON_MASTER_MASK[15]" comment="Bitfield indicating from which bus master(s) to count burst transactions. If multiple bits are set then multiple masters will be counted."/>
    <register addr="c0200040" rw_flags="R" width="4" name="MIF_AXI_MON_READ_BURST_COUNT" comment="Count of the number of read burst transactions on the AXI read channel."/>
    <register addr="c0200044" rw_flags="R" width="4" name="MIF_AXI_MON_READ_BYTE_COUNT" comment="Count of the number of bytes transferred in the read burst transactions on the AXI read channel."/>
    <register addr="c0200048" rw_flags="R" width="4" name="MIF_AXI_MON_WRITE_BURST_COUNT" comment="Count of the number of write burst transactions on the AXI read channel."/>
    <register addr="c020004c" rw_flags="R" width="4" name="MIF_AXI_MON_WRITE_BYTE_COUNT" comment="Count of the number of bytes transferred in the write burst transactions on the AXI write channel."/>
  </block>
  <block name="mildred_sfr_core" comment="Mildred 8051 special function registers">
    <register addr="c100fe04" rw_flags="RW" width="1" name="MILDRED_SP" comment="Stack pointer"/>
    <register addr="c100fe08" rw_flags="RW" width="1" name="MILDRED_DPL" comment="Data pointer low byte"/>
    <register addr="c100fe0c" rw_flags="RW" width="1" name="MILDRED_DPH" comment="Data pointer high byte"/>
    <register addr="c100fe10" rw_flags="RW" width="1" name="MILDRED_CONTROL" comment="Control Mildred"/>
    <register addr="c100fe14" rw_flags="RW" width="1" name="MILDRED_SET_PC_LO" comment="Set Mildred's PC - lower half"/>
    <register addr="c100fe18" rw_flags="RW" width="1" name="MILDRED_SET_PC_HI" comment="Set Mildred's PC - upper half. Setting this register causes the update to occur if Mildred is stopped."/>
    <register addr="c100fe1c" rw_flags="RW" width="1" name="MILDRED_PCON" comment="Power control"/>
    <register addr="c100fe20" rw_flags="RW" width="1" name="MILDRED_TCON" comment="Timer control"/>
    <register addr="c100fe24" rw_flags="RW" width="1" name="MILDRED_TMOD" comment="Timer mode"/>
    <register addr="c100fe28" rw_flags="RW" width="1" name="MILDRED_TL0" comment="Timer low 0"/>
    <register addr="c100fe2c" rw_flags="RW" width="1" name="MILDRED_TL1" comment="Timer low 1"/>
    <register addr="c100fe30" rw_flags="RW" width="1" name="MILDRED_TH0" comment="Timer high 0"/>
    <register addr="c100fe34" rw_flags="RW" width="1" name="MILDRED_TH1" comment="Timer high 1"/>
    <register addr="c100fe60" rw_flags="RW" width="1" name="MILDRED_SCON" comment="Serial interface unit (SIU) control."/>
    <register addr="c100fe64" rw_flags="RW" width="1" name="MILDRED_SBUF" comment="Serial data buffer"/>
    <register addr="c100fe84" rw_flags="RW" width="1" name="MILDRED_TIMER_COUNTER_PRESCALE_INT" comment="Set the integer part of the timer/counter prescaler"/>
    <register addr="c100fe88" rw_flags="RW" width="1" name="MILDRED_TIMER_COUNTER_PRESCALE_FRAC" comment="Set the fractional part of the timer/counter prescaler"/>
    <register addr="c100fe94" rw_flags="R" width="1" name="MILDRED_PROGRAM_COUNTER_LO" comment="Register view of the Mildred program counter"/>
    <register addr="c100fe98" rw_flags="R" width="1" name="MILDRED_PROGRAM_COUNTER_HI" comment="Register view of the Mildred program counter"/>
    <register addr="c100fe9c" rw_flags="RW" width="1" name="MILDRED_READ_WRITE_INTERNAL_INT_STATE" comment="Clear Mildred's internal interrupt status flops. This is a bitfield register."/>
    <register addr="c100fea0" rw_flags="RW" width="1" name="MILDRED_IE" comment="Interrupt enable"/>
    <register addr="c100fee0" rw_flags="RW" width="1" name="MILDRED_IP" comment="Interrupt priority"/>
    <register addr="c100ff40" rw_flags="RW" width="1" name="MILDRED_PSW" comment="Program and status word"/>
    <register addr="c100ff80" rw_flags="RW" width="1" name="MILDRED_ACC" comment="Accumulator"/>
    <register addr="c100ff84" rw_flags="RW" width="1" name="MILDRED_SIU_SDIV" comment="Control the SDIV input to the serial interface unit"/>
    <register addr="c100ffc0" rw_flags="RW" width="1" name="MILDRED_B" comment="B register"/>
  </block>
  <block name="mildred_sfr_pmu" comment="Mildred 8051 special function registers">
    <register addr="c100fe00" rw_flags="RW" width="1" name="MILDRED_P0" comment="PIO 0-7 config/status"/>
    <register addr="c100fe38" rw_flags="RW" width="1" name="MILDRED_PIO_RISING" comment="Reads bits 07:00 of the PIO rising edge capture register. When a PIO is high the matching bit is asynchronously set. If low, writing a 1 clears the bit."/>
    <register addr="c100fe3c" rw_flags="RW" width="1" name="MILDRED_PIO_FALLING" comment="Reads bits 07:00 of the PIO falling edge capture register. When a PIO is low the matching bit is asynchronously set. If high, writing a 1 clears the bit."/>
    <register addr="c100fe40" rw_flags="RW" width="1" name="MILDRED_P1" comment="PIO 8-15 config/status"/>
    <register addr="c100fe44" rw_flags="RW" width="1" name="RESET" comment="Resets for main MXL140 clock generator, WLBT toplevel"/>
    <register addr="c100fe48" rw_flags="RW" width="1" name="CLOCK_ENABLE" comment="Enables for main clock generator"/>
    <register addr="c100fe4c" rw_flags="RW" width="1" name="CLOCK_ENABLE2" comment="Enables for main clock generator"/>
    <register addr="c100fe50" rw_flags="RW" width="1" name="QREQ_OFF_OVR" comment="Q-channel request overrides. These are actually clock gate enables to bypass the Q-channel managers."/>
    <register addr="c100fe54" rw_flags="RW" width="1" name="MILDRED_RFIC_STATUS" comment=""/>
    <register addr="c100fe58" rw_flags="RW" width="1" name="RAM_POWER_CONTROL" comment="The RAM retention controls for the Core PD processor platform."/>
    <register addr="c100fe5c" rw_flags="RW" width="1" name="PIO_ALV" comment="These control the FEMCTRL output pins if PIO_ALV_EN is set to PIO_ALIVE_EN_PMU."/>
    <register addr="c100fe68" rw_flags="RW" width="1" name="WPLL_FVALUE_3124" comment="PLL F controls"/>
    <register addr="c100fe6c" rw_flags="RW" width="1" name="WPLL_FVALUE_2316" comment="PLL F controls"/>
    <register addr="c100fe70" rw_flags="RW" width="1" name="WPLL_FVALUE_1508" comment="PLL F controls"/>
    <register addr="c100fe74" rw_flags="RW" width="1" name="WPLL_FVALUE_0700" comment="PLL F controls"/>
    <register addr="c100fe78" rw_flags="RW" width="1" name="CLOCK_MUX_SEL" comment="Choose which clock to run the PMU on. This is also the CFG clock."/>
    <register addr="c100fe7c" rw_flags="RW" width="1" name="CS_DEBUG" comment="Register-controllable CoreSight debug authentication bits."/>
    <register addr="c100fe80" rw_flags="RW" width="1" name="MILDRED_RESOURCE_REQ" comment="Outgoing resource requests from WLBT to AP/CP. Leave the requests asserted until no longer required."/>
    <register addr="c100fe8c" rw_flags="RW" width="1" name="MILDRED_TIMER_COUNTER_MUX_SEL" comment="Choose the source for timer/counter 0 and 1. 0-15 = PIO[15:0]."/>
    <register addr="c100fe90" rw_flags="RW" width="1" name="QCH_FORCE_EN" comment="Q-channel manager force clock enable"/>
    <register addr="c100fea4" rw_flags="RW" width="1" name="CLOCK_MUX_CFG_SEL" comment="Choose which clock to run the CFG interface on."/>
    <register addr="c100fea8" rw_flags="RW" width="1" name="CLK_GATE_OVR" comment="Clock Gate overrides. Set to '1' to enable the clocks for each of the specified blocks."/>
    <register addr="c100feac" rw_flags="R" width="1" name="WPLL_STATUS" comment=""/>
    <register addr="c100feb0" rw_flags="RW" width="1" name="PCH_REQ" comment="P-channel manager power down request. Set to '1' to request power down and '0' to power up. Handily inverted logic."/>
    <register addr="c100feb4" rw_flags="R" width="1" name="PCH_ACK" comment="P-channel manager power down acknowledge. 1 = powered-down, 0 = powered-up."/>
    <register addr="c100feb8" rw_flags="RW" width="1" name="MILDRED_IPC_IRQ" comment="Interprocessor communication interrupts "/>
    <register addr="c100febc" rw_flags="RW" width="1" name="MILDRED_EXT_RESET_REQUEST" comment="Requests and status out of WLBT"/>
    <register addr="c100fec0" rw_flags="R" width="1" name="MILDRED_RESOURCE_ACK" comment="Outgoing resource status/acknowledgement"/>
    <register addr="c100fec4" rw_flags="RW" width="1" name="SWEEPER_CONTROL" comment="Controls the Sweeper modules in WLBT. Set to 1 to start a sweeper clean. Return to 0 once the ACK for that sweeper is set."/>
    <register addr="c100fec8" rw_flags="R" width="1" name="SWEEPER_STATUS" comment="Status from the Sweeper modules in WLBT. '1' in a field indicates Sweeper completion."/>
    <register addr="c100fecc" rw_flags="R" width="1" name="MILDRED_AP2WB_REQ" comment="Incoming requests from AP to WLBT."/>
    <register addr="c100fed0" rw_flags="RW" width="1" name="MILDRED_WB2AP_ACK" comment="Outgoing acknowledgement from WLBT to AP."/>
    <register addr="c100fed4" rw_flags="RW" width="1" name="CLK_GATE_OVR2" comment="Clock Gate overrides. Set to '1' to enable the clocks for each of the specified blocks."/>
    <register addr="c100fed8" rw_flags="RW" width="1" name="WATCHDOG_ENABLE" comment="Writing '1' enables the watchdog regardless of its previous state and resets its state machine to WATCHDOG_STATUS_FSM_ENABLED."/>
    <register addr="c100fedc" rw_flags="RW" width="1" name="WATCHDOG_DISABLE" comment="Writing the 3 disable codes in sequence to this register will disable the watchdog. Writing WATCHDOG_DEBUG_CODE3 instead of WATCHDOG_DISABLE_CODE3 will set the watchdog into debug mode. Each correct code written will advance the WATCHDOG_STATUS by 1 until it reaches 3. A status of 3 indicates that the watchdog has been disabled A status of 4 indicates that the watchdog is in debug mode. If an incorrect code is written at any time, the status will revert to 0 (enabled). The watchdog will not stop counting down until all three codes have been written correctly."/>
    <register addr="c100fee4" rw_flags="RW" width="1" name="WATCHDOG_KICK" comment="Writing to this register causes the countdown value to be reset to the value stored in WATCHDOG_DELAY. WATCHDOG_DELAY is captured into the slow clock domain after a cycle or two. The register fields WATCHDOG_STATUS_KICK_PENDING and WATCHDOG_STATUS_SLOW_KICK_PENDING indicate if this register has already been written and an update is currently pending. Writing this register toggles a flag inside the watchdog logic so writing it a second time before the first has successfully propagated will clear the toggle and cancel the kick."/>
    <register addr="c100fee8" rw_flags="R" width="1" name="WATCHDOG_STATUS" comment="Watchdog status compound register."/>
    <register addr="c100feec" rw_flags="RW" width="1" name="PIO_ALV_EN" comment="Set to appropriate values to control the source for the FEMCTRL pins."/>
    <register addr="c100fef0" rw_flags="R" width="1" name="PIO_ALV_STATUS" comment="FEMCTRL pins status if PIO_ALV_OE_0..3 are set to 0."/>
    <register addr="c100fef4" rw_flags="RW" width="1" name="MILDRED_INT_EN" comment="Interrupt enable."/>
    <register addr="c100fef8" rw_flags="RW" width="1" name="DRCG" comment="Dynamic Root Clock gating feature of SLSI blocks. Set to '1' to enable block clock gating. Otherwise the clocks will run all the time."/>
    <register addr="c100fefc" rw_flags="RW" width="1" name="MILDRED_INT_VECTOR_HI" comment="Interrupt vector top 8 bits."/>
    <register addr="c100ff00" rw_flags="RW" width="1" name="MILDRED_INT_STATUS" comment="Interrupt status. Write to clear."/>
    <register addr="c100ff04" rw_flags="RW" width="1" name="WPLL_CONTROLS_0" comment="PLL controls"/>
    <register addr="c100ff08" rw_flags="RW" width="1" name="WPLL_CONTROLS_1" comment="PLL controls"/>
    <register addr="c100ff0c" rw_flags="RW" width="1" name="WPLL_CONTROLS_2" comment="PLL controls"/>
    <register addr="c100ff10" rw_flags="RW" width="1" name="WPLL_CONTROLS_3" comment="PLL controls"/>
    <register addr="c100ff14" rw_flags="RW" width="1" name="WPLL_CONTROLS_4" comment="PLL controls"/>
    <register addr="c100ff18" rw_flags="RW" width="1" name="WPLL_CONTROLS_5" comment="PLL controls"/>
    <register addr="c100ff1c" rw_flags="RW" width="1" name="WPLL_CONTROLS_6" comment="PLL controls"/>
    <register addr="c100ff20" rw_flags="RW" width="1" name="MILDRED_INT_PRIORITIES" comment="Interrupt source priorities."/>
    <register addr="c100ff24" rw_flags="RW" width="1" name="WPLL_KVALUE_3124" comment="PLL K controls"/>
    <register addr="c100ff28" rw_flags="RW" width="1" name="WPLL_KVALUE_2316" comment="PLL K controls"/>
    <register addr="c100ff2c" rw_flags="RW" width="1" name="WPLL_KVALUE_1508" comment="PLL K controls"/>
    <register addr="c100ff30" rw_flags="RW" width="1" name="WPLL_KVALUE_0700" comment="PLL K controls"/>
    <register addr="c100ff34" rw_flags="RW" width="1" name="PD_CONTROL_PHY" comment="Controls the state of switches, isolation and reset in PHY power domain"/>
    <register addr="c100ff38" rw_flags="RW" width="1" name="PD_CONTROL_CORE" comment="Controls the state of switches, isolation and reset in CORE power domain"/>
    <register addr="c100ff3c" rw_flags="R" width="1" name="PD_STATUS" comment="Indicates the status of the switches in each power domain"/>
    <register addr="c100ff44" rw_flags="RW" width="1" name="WPLL_CONTROLS_7" comment="PLL controls"/>
    <register addr="c100ff48" rw_flags="RW" width="1" name="WPLL_CONTROLS_8" comment="PLL controls"/>
    <register addr="c100ff4c" rw_flags="RW" width="1" name="WPLL_CONTROLS_9" comment="PLL controls"/>
    <register addr="c100ff50" rw_flags="RW" width="1" name="WPLL_CONTROLS_10" comment="PLL controls"/>
    <register addr="c100ff54" rw_flags="RW" width="1" name="WPLL_CONTROLS_11" comment="PLL controls"/>
    <register addr="c100ff58" rw_flags="RW" width="1" name="MILDRED_PIO_RISING_MASK" comment="Bits 07:00 of the PIO rising edge interrupt mask register. The contents of this register are ANDed with MILDRED_P0_RISING and if any bits are 1 an interrupt is raised."/>
    <register addr="c100ff5c" rw_flags="RW" width="1" name="MILDRED_PIO_FALLING_MASK" comment="Bits 07:00 of the PIO falling edge interrupt mask register. The contents of this register are ANDed with MILDRED_P0_FALLING and if any bits are 1 an interrupt is raised."/>
    <register addr="c100ff60" rw_flags="RW" width="1" name="MILDRED_INT_SOURCES_EN" comment="Interrupt sources enable."/>
    <register addr="c100ff64" rw_flags="RW" width="1" name="PMU_RFIC_CTRL_ORIDE" comment="RFIC control registers"/>
    <register addr="c100ff68" rw_flags="RW" width="1" name="MILDRED_RFIC_MASK" comment=""/>
    <register addr="c100ff6c" rw_flags="R" width="1" name="SLOW_CLK_TIMER_STATUS_3124" comment="A free-running slow clock counter - bits 31-24"/>
    <register addr="c100ff70" rw_flags="R" width="1" name="SLOW_CLK_TIMER_STATUS_2316" comment="A free-running slow clock counter - bits 23-16"/>
    <register addr="c100ff74" rw_flags="R" width="1" name="SLOW_CLK_TIMER_STATUS_1508" comment="A free-running slow clock counter - bits 15-8"/>
    <register addr="c100ff78" rw_flags="R" width="1" name="SLOW_CLK_TIMER_STATUS_0700" comment="A free-running slow clock counter - bits 7-0"/>
    <register addr="c100ff7c" rw_flags="RW" width="1" name="WPLL_CONTROLS_12" comment="PLL controls"/>
    <register addr="c100ff8c" rw_flags="RW" width="1" name="WATCHDOG_DELAY_3124" comment="This is the reset value for the watchdog countdown. The reset value is 0xFFFF which allows a countdown period of 2 seconds. The maximum value of 0xFFFFFFFF allows for a sleep time of around 37 hours"/>
    <register addr="c100ff90" rw_flags="RW" width="1" name="WATCHDOG_DELAY_2316" comment="This is the reset value for the watchdog countdown. The reset value is 0xFFFF which allows a countdown period of 2 seconds. The maximum value of 0xFFFFFFFF allows for a sleep time of around 37 hours"/>
    <register addr="c100ff94" rw_flags="RW" width="1" name="WATCHDOG_DELAY_1508" comment="This is the reset value for the watchdog countdown. The reset value is 0xFFFF which allows a countdown period of 2 seconds. The maximum value of 0xFFFFFFFF allows for a sleep time of around 37 hours"/>
    <register addr="c100ff98" rw_flags="RW" width="1" name="WATCHDOG_DELAY_0700" comment="This is the reset value for the watchdog countdown. The reset value is 0xFFFF which allows a countdown period of 2 seconds. The maximum value of 0xFFFFFFFF allows for a sleep time of around 37 hours"/>
    <register addr="c100ff9c" rw_flags="RW" width="1" name="WPLL_CONTROLS_13" comment="PLL controls"/>
    <register addr="c100ffa0" rw_flags="RW" width="1" name="MILDRED_PIO_0700_DRIVE_ENABLE" comment="Bits [ 7: 0] of PIO drive enable bus. These 8 PIO drive enable bits are bit-addressable to allow convenient switching for use with e.g. I2C."/>
    <register addr="c100ffa4" rw_flags="RW" width="1" name="DEEP_SLEEP_PIO_0700_WAKEUP_ENABLES" comment="This register enables the PIO[7:0] inputs individually to allow them to create a deep sleep wakeup event."/>
    <register addr="c100ffa8" rw_flags="RW" width="1" name="DEEP_SLEEP_PIO_0700_WAKEUP_INVERT" comment="This register inverts the PIO[7:0] inputs individually before feeding them into the deep sleep wakeup logic. A 1 on the resulting bit may cause a wakeup event."/>
    <register addr="c100ffac" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS_PIO_0700_WAKEUP_STICKY" comment="This register returns a sticky version of the PIO[7:0] deep sleep wakeup activities. Clear the sticky activity flops by writing 1 to DEEP_SLEEP_WAKEUP_CLR_PIO."/>
    <register addr="c100ffb0" rw_flags="RW" width="1" name="DEEP_SLEEP_PIO_1508_WAKEUP_ENABLES" comment="This register enables the PIO[15:8] inputs individually to allow them to create a deep sleep wakeup event."/>
    <register addr="c100ffb4" rw_flags="RW" width="1" name="DEEP_SLEEP_PIO_1508_WAKEUP_INVERT" comment="This register inverts the PIO[15:8] inputs individually before feeding them into the deep sleep wakeup logic. A 1 on the resulting bit may cause a wakeup event."/>
    <register addr="c100ffb8" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS_PIO_1508_WAKEUP_STICKY" comment="This register returns a sticky version of the PIO[15:8] deep sleep wakeup activities. Clear the sticky activity flops by writing 1 to DEEP_SLEEP_WAKEUP_CLR_PIO."/>
    <register addr="c100ffbc" rw_flags="RW" width="1" name="DEEP_SLEEP_CMD" comment="This register is used to trigger events in the sleep block"/>
    <register addr="c100ffc4" rw_flags="RW" width="1" name="DEEP_SLEEP_WAKEUP_ENABLES0" comment="This register controls the sources which can cause deep sleep wakeup. Functions are enabled by setting individual bits. Bits are enumerated  as DEEP_SLEEP_WAKEUP.  "/>
    <register addr="c100ffc8" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS0" comment="This register indicates the currently-active deep sleep wakeup sources."/>
    <register addr="c100ffcc" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS_STICKY0" comment="This register returns a sticky version of DEEP_SLEEP_STATUS, recording all wakeup events since it was last cleared. Bits are enumerated  as DEEP_SLEEP_WAKEUP.  "/>
    <register addr="c100ffd0" rw_flags="RW" width="1" name="DEEP_SLEEP_WAKEUP_ENABLES1" comment="This register controls the sources which can cause deep sleep wakeup. Functions are enabled by setting individual bits. Bits are enumerated  as DEEP_SLEEP_WAKEUP. "/>
    <register addr="c100ffd4" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS1" comment="This register indicates the currently-active deep sleep wakeup sources."/>
    <register addr="c100ffd8" rw_flags="R" width="1" name="DEEP_SLEEP_STATUS_STICKY1" comment="This register returns a sticky version of DEEP_SLEEP_STATUS, recording all wakeup events since it was last cleared.  "/>
    <register addr="c100ffdc" rw_flags="RW" width="1" name="PROC_CONFIG" comment="PROC processor platform configuration"/>
    <register addr="c100ffe0" rw_flags="RW" width="1" name="MILDRED_PIO_1508_DRIVE_ENABLE" comment="Bits [15: 8] of PIO drive enable bus. These 8 PIO drive enable bits are bit-addressable to allow convenient switching for use with e.g. I2C."/>
    <register addr="c100ffe4" rw_flags="RW" width="1" name="MILDRED_MISC_CONTROL" comment="Miscellaneous control signals"/>
    <register addr="c100ffe8" rw_flags="RW" width="1" name="SLOW_CLK_TIMER_EVENT_3124" comment="When the timer matches this count a deep sleep wakeup event will be triggered - bits 31-24"/>
    <register addr="c100ffec" rw_flags="RW" width="1" name="SLOW_CLK_TIMER_EVENT_2316" comment="When the timer matches this count a deep sleep wakeup event will be triggered - bits 23-16"/>
    <register addr="c100fff0" rw_flags="RW" width="1" name="SLOW_CLK_TIMER_EVENT_1508" comment="When the timer matches this count a deep sleep wakeup event will be triggered - bits 15-8"/>
    <register addr="c100fff4" rw_flags="RW" width="1" name="SLOW_CLK_TIMER_EVENT_0700" comment="When the timer matches this count a deep sleep wakeup event will be triggered - bits 7-0"/>
    <register addr="c100fff8" rw_flags="RW" width="1" name="PAD_RETENTION" comment="Pad retention controls."/>
    <register addr="c100fffc" rw_flags="RW" width="1" name="DEBUG_SOURCE_SELECT" comment="Select the ouput on DEBUG_OUT[15:0] on the PMU"/>
  </block>
  <block name="pcm_0" comment="PCM control registers">
    <register addr="c5600000" rw_flags="RW" width="4" name="PCM_CONFIG1_I0" comment=""/>
    <register addr="c5600004" rw_flags="RW" width="2" name="PCM_CONFIG2_I0" comment=""/>
    <register addr="c5600008" rw_flags="RW" width="2" name="PCM_CONFIG3_I0" comment=""/>
    <register addr="c560000c" rw_flags="RW" width="2" name="PCM_CONFIG4_I0" comment=""/>
    <register addr="c5600010" rw_flags="RW" width="2" name="PCM_CONFIG5_I0" comment=""/>
    <register addr="c5600014" rw_flags="RW" width="2" name="PCM_CONFIG6_I0" comment="PCM_CONFIG4_CLK_GEN_CNT_RATE when extended features enabled"/>
    <register addr="c5600018" rw_flags="RW" width="2" name="PCM_AUDIO_GAIN_I0" comment="Pad data when padding 13 bits to 16 bits (bottom 3 bits valid)"/>
    <register addr="c560001c" rw_flags="R" width="1" name="PCM_STATUS_I0" comment=""/>
    <register addr="c5600020" rw_flags="RW" width="1" name="PCM_PAD_CONFIG_I0" comment=""/>
    <register addr="c5600024" rw_flags="RW" width="2" name="PCM_RX_SLOT_CFG_I0" comment="Re-sample (under-sample) incoming PCM Data stream. 0: no under sampling, 1: 2-]1 2: 3-]1 ...16-]1"/>
    <register addr="c5600028" rw_flags="RW" width="2" name="PCM_TX_SLOT_CFG_I0" comment="Re-sample (over-sample) outgoing PCM Data stream. 0: no over sampling; 1: 1-]2; 2: 1-]3 ... 1-]16"/>
    <register addr="c560002c" rw_flags="RW" width="1" name="PCM_TX_SLOT_ALIGN_CFG_I0" comment="When enabled Aligns the PCM slots with the correct buffers"/>
    <register addr="c5600030" rw_flags="RW" width="1" name="PCM_RX_SLOT_ALIGN_CFG_I0" comment="When enabled Aligns the PCM slots with the correct buffers"/>
    <register addr="c5600034" rw_flags="RW" width="4" name="PCM_SLOT_ROUTING_I0" comment="Routes which slots go to which FIFO"/>
    <register addr="c5600038" rw_flags="RW" width="1" name="PCM_IO_DRV_DEBUG_SEL_I0" comment="Debug select register for IO_DRV_PCM"/>
    <register addr="c560003c" rw_flags="RW" width="1" name="PCM_MEM_DEBUG_SEL_I0" comment="Debug select register for MEM_CTRL_PCM"/>
    <register addr="c5600040" rw_flags="RW" width="1" name="PCM_TOP_DEBUG_SEL_I0" comment="Top level Debug bus select for PCM"/>
    <register addr="c5600044" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[0]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5600048" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[1]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c560004c" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[2]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5600050" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[3]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5600054" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[4]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5600058" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I0[5]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c560005c" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[0]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5600060" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[1]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5600064" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[2]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5600068" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[3]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c560006c" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[4]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5600070" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I0[5]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5600074" rw_flags="RW" width="4" name="PCM_INT_EN_I0" comment="Interrupt sources enable."/>
    <register addr="c5600078" rw_flags="R" width="4" name="PCM_INT_STATUS_I0" comment="Status of Interrupt sources."/>
    <register addr="c560007c" rw_flags="W" width="4" name="PCM_INT_CLEAR_I0" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c5600080" rw_flags="RW" width="2" name="PCM_INT_WATER_EN_I0" comment="Interrupt sources enable for the water mark indicators."/>
    <register addr="c5600084" rw_flags="R" width="2" name="PCM_INT_WATER_STATUS_I0" comment="Status of Interrupt sources."/>
    <register addr="c5600088" rw_flags="W" width="2" name="PCM_INT_WATER_CLEAR_I0" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c560008c" rw_flags="RW" width="2" name="PCM_FIFO_WIDTH_I0" comment="Sets the width of each FIFO"/>
    <register addr="c5600090" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_0_I0" comment="Writes to fifo 0"/>
    <register addr="c5600094" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_1_I0" comment="Writes to fifo 0"/>
    <register addr="c5600098" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_2_I0" comment="Writes to fifo 0"/>
    <register addr="c560009c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_3_I0" comment="Writes to fifo 0"/>
    <register addr="c56000a0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_4_I0" comment="Writes to fifo 0"/>
    <register addr="c56000a4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_5_I0" comment="Writes to fifo 0"/>
    <register addr="c56000a8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_6_I0" comment="Writes to fifo 0"/>
    <register addr="c56000ac" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_7_I0" comment="Writes to fifo 0"/>
    <register addr="c56000b0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_8_I0" comment="Writes to fifo 0"/>
    <register addr="c56000b4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_9_I0" comment="Writes to fifo 0"/>
    <register addr="c56000b8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_10_I0" comment="Writes to fifo 0"/>
    <register addr="c56000bc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_11_I0" comment="Writes to fifo 0"/>
    <register addr="c56000c0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_12_I0" comment="Writes to fifo 0"/>
    <register addr="c56000c4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_13_I0" comment="Writes to fifo 0"/>
    <register addr="c56000c8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_14_I0" comment="Writes to fifo 0"/>
    <register addr="c56000cc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_15_I0" comment="Writes to fifo 0"/>
    <register addr="c56000d0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_0_I0" comment="Writes to fifo 1"/>
    <register addr="c56000d4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_1_I0" comment="Writes to fifo 1"/>
    <register addr="c56000d8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_2_I0" comment="Writes to fifo 1"/>
    <register addr="c56000dc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_3_I0" comment="Writes to fifo 1"/>
    <register addr="c56000e0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_4_I0" comment="Writes to fifo 1"/>
    <register addr="c56000e4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_5_I0" comment="Writes to fifo 1"/>
    <register addr="c56000e8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_6_I0" comment="Writes to fifo 1"/>
    <register addr="c56000ec" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_7_I0" comment="Writes to fifo 1"/>
    <register addr="c56000f0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_8_I0" comment="Writes to fifo 1"/>
    <register addr="c56000f4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_9_I0" comment="Writes to fifo 1"/>
    <register addr="c56000f8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_10_I0" comment="Writes to fifo 1"/>
    <register addr="c56000fc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_11_I0" comment="Writes to fifo 1"/>
    <register addr="c5600100" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_12_I0" comment="Writes to fifo 1"/>
    <register addr="c5600104" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_13_I0" comment="Writes to fifo 1"/>
    <register addr="c5600108" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_14_I0" comment="Writes to fifo 1"/>
    <register addr="c560010c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_15_I0" comment="Writes to fifo 1"/>
    <register addr="c5600110" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_0_I0" comment="Writes to fifo 2"/>
    <register addr="c5600114" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_1_I0" comment="Writes to fifo 2"/>
    <register addr="c5600118" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_2_I0" comment="Writes to fifo 2"/>
    <register addr="c560011c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_3_I0" comment="Writes to fifo 2"/>
    <register addr="c5600120" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_4_I0" comment="Writes to fifo 2"/>
    <register addr="c5600124" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_5_I0" comment="Writes to fifo 2"/>
    <register addr="c5600128" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_6_I0" comment="Writes to fifo 2"/>
    <register addr="c560012c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_7_I0" comment="Writes to fifo 2"/>
    <register addr="c5600130" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_8_I0" comment="Writes to fifo 2"/>
    <register addr="c5600134" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_9_I0" comment="Writes to fifo 2"/>
    <register addr="c5600138" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_10_I0" comment="Writes to fifo 2"/>
    <register addr="c560013c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_11_I0" comment="Writes to fifo 2"/>
    <register addr="c5600140" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_12_I0" comment="Writes to fifo 2"/>
    <register addr="c5600144" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_13_I0" comment="Writes to fifo 2"/>
    <register addr="c5600148" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_14_I0" comment="Writes to fifo 2"/>
    <register addr="c560014c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_15_I0" comment="Writes to fifo 2"/>
    <register addr="c5600150" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_0_I0" comment="Writes to fifo 3"/>
    <register addr="c5600154" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_1_I0" comment="Writes to fifo 3"/>
    <register addr="c5600158" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_2_I0" comment="Writes to fifo 3"/>
    <register addr="c560015c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_3_I0" comment="Writes to fifo 3"/>
    <register addr="c5600160" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_4_I0" comment="Writes to fifo 3"/>
    <register addr="c5600164" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_5_I0" comment="Writes to fifo 3"/>
    <register addr="c5600168" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_6_I0" comment="Writes to fifo 3"/>
    <register addr="c560016c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_7_I0" comment="Writes to fifo 3"/>
    <register addr="c5600170" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_8_I0" comment="Writes to fifo 3"/>
    <register addr="c5600174" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_9_I0" comment="Writes to fifo 3"/>
    <register addr="c5600178" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_10_I0" comment="Writes to fifo 3"/>
    <register addr="c560017c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_11_I0" comment="Writes to fifo 3"/>
    <register addr="c5600180" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_12_I0" comment="Writes to fifo 3"/>
    <register addr="c5600184" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_13_I0" comment="Writes to fifo 3"/>
    <register addr="c5600188" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_14_I0" comment="Writes to fifo 3"/>
    <register addr="c560018c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_15_I0" comment="Writes to fifo 3"/>
    <register addr="c5600190" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_0_I0" comment="Writes to fifo 4"/>
    <register addr="c5600194" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_1_I0" comment="Writes to fifo 4"/>
    <register addr="c5600198" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_2_I0" comment="Writes to fifo 4"/>
    <register addr="c560019c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_3_I0" comment="Writes to fifo 4"/>
    <register addr="c56001a0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_4_I0" comment="Writes to fifo 4"/>
    <register addr="c56001a4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_5_I0" comment="Writes to fifo 4"/>
    <register addr="c56001a8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_6_I0" comment="Writes to fifo 4"/>
    <register addr="c56001ac" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_7_I0" comment="Writes to fifo 4"/>
    <register addr="c56001b0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_8_I0" comment="Writes to fifo 4"/>
    <register addr="c56001b4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_9_I0" comment="Writes to fifo 4"/>
    <register addr="c56001b8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_10_I0" comment="Writes to fifo 4"/>
    <register addr="c56001bc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_11_I0" comment="Writes to fifo 4"/>
    <register addr="c56001c0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_12_I0" comment="Writes to fifo 4"/>
    <register addr="c56001c4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_13_I0" comment="Writes to fifo 4"/>
    <register addr="c56001c8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_14_I0" comment="Writes to fifo 4"/>
    <register addr="c56001cc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_15_I0" comment="Writes to fifo 4"/>
    <register addr="c56001d0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_0_I0" comment="Writes to fifo 5"/>
    <register addr="c56001d4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_1_I0" comment="Writes to fifo 5"/>
    <register addr="c56001d8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_2_I0" comment="Writes to fifo 5"/>
    <register addr="c56001dc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_3_I0" comment="Writes to fifo 5"/>
    <register addr="c56001e0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_4_I0" comment="Writes to fifo 5"/>
    <register addr="c56001e4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_5_I0" comment="Writes to fifo 5"/>
    <register addr="c56001e8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_6_I0" comment="Writes to fifo 5"/>
    <register addr="c56001ec" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_7_I0" comment="Writes to fifo 5"/>
    <register addr="c56001f0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_8_I0" comment="Writes to fifo 5"/>
    <register addr="c56001f4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_9_I0" comment="Writes to fifo 5"/>
    <register addr="c56001f8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_10_I0" comment="Writes to fifo 5"/>
    <register addr="c56001fc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_11_I0" comment="Writes to fifo 5"/>
    <register addr="c5600200" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_12_I0" comment="Writes to fifo 5"/>
    <register addr="c5600204" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_13_I0" comment="Writes to fifo 5"/>
    <register addr="c5600208" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_14_I0" comment="Writes to fifo 5"/>
    <register addr="c560020c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_15_I0" comment="Writes to fifo 5"/>
    <register addr="c5600210" rw_flags="R" width="4" name="PCM_READ_FIFO_0_0_I0" comment="Read from fifo 0"/>
    <register addr="c5600214" rw_flags="R" width="4" name="PCM_READ_FIFO_0_1_I0" comment="Read from fifo 0"/>
    <register addr="c5600218" rw_flags="R" width="4" name="PCM_READ_FIFO_0_2_I0" comment="Read from fifo 0"/>
    <register addr="c560021c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_3_I0" comment="Read from fifo 0"/>
    <register addr="c5600220" rw_flags="R" width="4" name="PCM_READ_FIFO_0_4_I0" comment="Read from fifo 0"/>
    <register addr="c5600224" rw_flags="R" width="4" name="PCM_READ_FIFO_0_5_I0" comment="Read from fifo 0"/>
    <register addr="c5600228" rw_flags="R" width="4" name="PCM_READ_FIFO_0_6_I0" comment="Read from fifo 0"/>
    <register addr="c560022c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_7_I0" comment="Read from fifo 0"/>
    <register addr="c5600230" rw_flags="R" width="4" name="PCM_READ_FIFO_0_8_I0" comment="Read from fifo 0"/>
    <register addr="c5600234" rw_flags="R" width="4" name="PCM_READ_FIFO_0_9_I0" comment="Read from fifo 0"/>
    <register addr="c5600238" rw_flags="R" width="4" name="PCM_READ_FIFO_0_10_I0" comment="Read from fifo 0"/>
    <register addr="c560023c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_11_I0" comment="Read from fifo 0"/>
    <register addr="c5600240" rw_flags="R" width="4" name="PCM_READ_FIFO_0_12_I0" comment="Read from fifo 0"/>
    <register addr="c5600244" rw_flags="R" width="4" name="PCM_READ_FIFO_0_13_I0" comment="Read from fifo 0"/>
    <register addr="c5600248" rw_flags="R" width="4" name="PCM_READ_FIFO_0_14_I0" comment="Read from fifo 0"/>
    <register addr="c560024c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_15_I0" comment="Read from fifo 0"/>
    <register addr="c5600250" rw_flags="R" width="4" name="PCM_READ_FIFO_1_0_I0" comment="Read from fifo 1"/>
    <register addr="c5600254" rw_flags="R" width="4" name="PCM_READ_FIFO_1_1_I0" comment="Read from fifo 1"/>
    <register addr="c5600258" rw_flags="R" width="4" name="PCM_READ_FIFO_1_2_I0" comment="Read from fifo 1"/>
    <register addr="c560025c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_3_I0" comment="Read from fifo 1"/>
    <register addr="c5600260" rw_flags="R" width="4" name="PCM_READ_FIFO_1_4_I0" comment="Read from fifo 1"/>
    <register addr="c5600264" rw_flags="R" width="4" name="PCM_READ_FIFO_1_5_I0" comment="Read from fifo 1"/>
    <register addr="c5600268" rw_flags="R" width="4" name="PCM_READ_FIFO_1_6_I0" comment="Read from fifo 1"/>
    <register addr="c560026c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_7_I0" comment="Read from fifo 1"/>
    <register addr="c5600270" rw_flags="R" width="4" name="PCM_READ_FIFO_1_8_I0" comment="Read from fifo 1"/>
    <register addr="c5600274" rw_flags="R" width="4" name="PCM_READ_FIFO_1_9_I0" comment="Read from fifo 1"/>
    <register addr="c5600278" rw_flags="R" width="4" name="PCM_READ_FIFO_1_10_I0" comment="Read from fifo 1"/>
    <register addr="c560027c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_11_I0" comment="Read from fifo 1"/>
    <register addr="c5600280" rw_flags="R" width="4" name="PCM_READ_FIFO_1_12_I0" comment="Read from fifo 1"/>
    <register addr="c5600284" rw_flags="R" width="4" name="PCM_READ_FIFO_1_13_I0" comment="Read from fifo 1"/>
    <register addr="c5600288" rw_flags="R" width="4" name="PCM_READ_FIFO_1_14_I0" comment="Read from fifo 1"/>
    <register addr="c560028c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_15_I0" comment="Read from fifo 1"/>
    <register addr="c5600290" rw_flags="R" width="4" name="PCM_READ_FIFO_2_0_I0" comment="Read from fifo 2"/>
    <register addr="c5600294" rw_flags="R" width="4" name="PCM_READ_FIFO_2_1_I0" comment="Read from fifo 2"/>
    <register addr="c5600298" rw_flags="R" width="4" name="PCM_READ_FIFO_2_2_I0" comment="Read from fifo 2"/>
    <register addr="c560029c" rw_flags="R" width="4" name="PCM_READ_FIFO_2_3_I0" comment="Read from fifo 2"/>
    <register addr="c56002a0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_4_I0" comment="Read from fifo 2"/>
    <register addr="c56002a4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_5_I0" comment="Read from fifo 2"/>
    <register addr="c56002a8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_6_I0" comment="Read from fifo 2"/>
    <register addr="c56002ac" rw_flags="R" width="4" name="PCM_READ_FIFO_2_7_I0" comment="Read from fifo 2"/>
    <register addr="c56002b0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_8_I0" comment="Read from fifo 2"/>
    <register addr="c56002b4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_9_I0" comment="Read from fifo 2"/>
    <register addr="c56002b8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_10_I0" comment="Read from fifo 2"/>
    <register addr="c56002bc" rw_flags="R" width="4" name="PCM_READ_FIFO_2_11_I0" comment="Read from fifo 2"/>
    <register addr="c56002c0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_12_I0" comment="Read from fifo 2"/>
    <register addr="c56002c4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_13_I0" comment="Read from fifo 2"/>
    <register addr="c56002c8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_14_I0" comment="Read from fifo 2"/>
    <register addr="c56002cc" rw_flags="R" width="4" name="PCM_READ_FIFO_2_15_I0" comment="Read from fifo 2"/>
    <register addr="c56002d0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_0_I0" comment="Read from fifo 3"/>
    <register addr="c56002d4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_1_I0" comment="Read from fifo 3"/>
    <register addr="c56002d8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_2_I0" comment="Read from fifo 3"/>
    <register addr="c56002dc" rw_flags="R" width="4" name="PCM_READ_FIFO_3_3_I0" comment="Read from fifo 3"/>
    <register addr="c56002e0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_4_I0" comment="Read from fifo 3"/>
    <register addr="c56002e4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_5_I0" comment="Read from fifo 3"/>
    <register addr="c56002e8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_6_I0" comment="Read from fifo 3"/>
    <register addr="c56002ec" rw_flags="R" width="4" name="PCM_READ_FIFO_3_7_I0" comment="Read from fifo 3"/>
    <register addr="c56002f0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_8_I0" comment="Read from fifo 3"/>
    <register addr="c56002f4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_9_I0" comment="Read from fifo 3"/>
    <register addr="c56002f8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_10_I0" comment="Read from fifo 3"/>
    <register addr="c56002fc" rw_flags="R" width="4" name="PCM_READ_FIFO_3_11_I0" comment="Read from fifo 3"/>
    <register addr="c5600300" rw_flags="R" width="4" name="PCM_READ_FIFO_3_12_I0" comment="Read from fifo 3"/>
    <register addr="c5600304" rw_flags="R" width="4" name="PCM_READ_FIFO_3_13_I0" comment="Read from fifo 3"/>
    <register addr="c5600308" rw_flags="R" width="4" name="PCM_READ_FIFO_3_14_I0" comment="Read from fifo 3"/>
    <register addr="c560030c" rw_flags="R" width="4" name="PCM_READ_FIFO_3_15_I0" comment="Read from fifo 3"/>
    <register addr="c5600310" rw_flags="R" width="4" name="PCM_READ_FIFO_4_0_I0" comment="Read from fifo 4"/>
    <register addr="c5600314" rw_flags="R" width="4" name="PCM_READ_FIFO_4_1_I0" comment="Read from fifo 4"/>
    <register addr="c5600318" rw_flags="R" width="4" name="PCM_READ_FIFO_4_2_I0" comment="Read from fifo 4"/>
    <register addr="c560031c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_3_I0" comment="Read from fifo 4"/>
    <register addr="c5600320" rw_flags="R" width="4" name="PCM_READ_FIFO_4_4_I0" comment="Read from fifo 4"/>
    <register addr="c5600324" rw_flags="R" width="4" name="PCM_READ_FIFO_4_5_I0" comment="Read from fifo 4"/>
    <register addr="c5600328" rw_flags="R" width="4" name="PCM_READ_FIFO_4_6_I0" comment="Read from fifo 4"/>
    <register addr="c560032c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_7_I0" comment="Read from fifo 4"/>
    <register addr="c5600330" rw_flags="R" width="4" name="PCM_READ_FIFO_4_8_I0" comment="Read from fifo 4"/>
    <register addr="c5600334" rw_flags="R" width="4" name="PCM_READ_FIFO_4_9_I0" comment="Read from fifo 4"/>
    <register addr="c5600338" rw_flags="R" width="4" name="PCM_READ_FIFO_4_10_I0" comment="Read from fifo 4"/>
    <register addr="c560033c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_11_I0" comment="Read from fifo 4"/>
    <register addr="c5600340" rw_flags="R" width="4" name="PCM_READ_FIFO_4_12_I0" comment="Read from fifo 4"/>
    <register addr="c5600344" rw_flags="R" width="4" name="PCM_READ_FIFO_4_13_I0" comment="Read from fifo 4"/>
    <register addr="c5600348" rw_flags="R" width="4" name="PCM_READ_FIFO_4_14_I0" comment="Read from fifo 4"/>
    <register addr="c560034c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_15_I0" comment="Read from fifo 4"/>
    <register addr="c5600350" rw_flags="R" width="4" name="PCM_READ_FIFO_5_0_I0" comment="Read from fifo 5"/>
    <register addr="c5600354" rw_flags="R" width="4" name="PCM_READ_FIFO_5_1_I0" comment="Read from fifo 5"/>
    <register addr="c5600358" rw_flags="R" width="4" name="PCM_READ_FIFO_5_2_I0" comment="Read from fifo 5"/>
    <register addr="c560035c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_3_I0" comment="Read from fifo 5"/>
    <register addr="c5600360" rw_flags="R" width="4" name="PCM_READ_FIFO_5_4_I0" comment="Read from fifo 5"/>
    <register addr="c5600364" rw_flags="R" width="4" name="PCM_READ_FIFO_5_5_I0" comment="Read from fifo 5"/>
    <register addr="c5600368" rw_flags="R" width="4" name="PCM_READ_FIFO_5_6_I0" comment="Read from fifo 5"/>
    <register addr="c560036c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_7_I0" comment="Read from fifo 5"/>
    <register addr="c5600370" rw_flags="R" width="4" name="PCM_READ_FIFO_5_8_I0" comment="Read from fifo 5"/>
    <register addr="c5600374" rw_flags="R" width="4" name="PCM_READ_FIFO_5_9_I0" comment="Read from fifo 5"/>
    <register addr="c5600378" rw_flags="R" width="4" name="PCM_READ_FIFO_5_10_I0" comment="Read from fifo 5"/>
    <register addr="c560037c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_11_I0" comment="Read from fifo 5"/>
    <register addr="c5600380" rw_flags="R" width="4" name="PCM_READ_FIFO_5_12_I0" comment="Read from fifo 5"/>
    <register addr="c5600384" rw_flags="R" width="4" name="PCM_READ_FIFO_5_13_I0" comment="Read from fifo 5"/>
    <register addr="c5600388" rw_flags="R" width="4" name="PCM_READ_FIFO_5_14_I0" comment="Read from fifo 5"/>
    <register addr="c560038c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_15_I0" comment="Read from fifo 5"/>
    <register addr="c5600390" rw_flags="W" width="1" name="PCM_FIFO_CMD_I0" comment="A set of instructions for the manulipation of FIFO's"/>
  </block>
  <block name="pcm_1" comment="PCM control registers">
    <register addr="c5700000" rw_flags="RW" width="4" name="PCM_CONFIG1_I1" comment=""/>
    <register addr="c5700004" rw_flags="RW" width="2" name="PCM_CONFIG2_I1" comment=""/>
    <register addr="c5700008" rw_flags="RW" width="2" name="PCM_CONFIG3_I1" comment=""/>
    <register addr="c570000c" rw_flags="RW" width="2" name="PCM_CONFIG4_I1" comment=""/>
    <register addr="c5700010" rw_flags="RW" width="2" name="PCM_CONFIG5_I1" comment=""/>
    <register addr="c5700014" rw_flags="RW" width="2" name="PCM_CONFIG6_I1" comment="PCM_CONFIG4_CLK_GEN_CNT_RATE when extended features enabled"/>
    <register addr="c5700018" rw_flags="RW" width="2" name="PCM_AUDIO_GAIN_I1" comment="Pad data when padding 13 bits to 16 bits (bottom 3 bits valid)"/>
    <register addr="c570001c" rw_flags="R" width="1" name="PCM_STATUS_I1" comment=""/>
    <register addr="c5700020" rw_flags="RW" width="1" name="PCM_PAD_CONFIG_I1" comment=""/>
    <register addr="c5700024" rw_flags="RW" width="2" name="PCM_RX_SLOT_CFG_I1" comment="Re-sample (under-sample) incoming PCM Data stream. 0: no under sampling, 1: 2-]1 2: 3-]1 ...16-]1"/>
    <register addr="c5700028" rw_flags="RW" width="2" name="PCM_TX_SLOT_CFG_I1" comment="Re-sample (over-sample) outgoing PCM Data stream. 0: no over sampling; 1: 1-]2; 2: 1-]3 ... 1-]16"/>
    <register addr="c570002c" rw_flags="RW" width="1" name="PCM_TX_SLOT_ALIGN_CFG_I1" comment="When enabled Aligns the PCM slots with the correct buffers"/>
    <register addr="c5700030" rw_flags="RW" width="1" name="PCM_RX_SLOT_ALIGN_CFG_I1" comment="When enabled Aligns the PCM slots with the correct buffers"/>
    <register addr="c5700034" rw_flags="RW" width="4" name="PCM_SLOT_ROUTING_I1" comment="Routes which slots go to which FIFO"/>
    <register addr="c5700038" rw_flags="RW" width="1" name="PCM_IO_DRV_DEBUG_SEL_I1" comment="Debug select register for IO_DRV_PCM"/>
    <register addr="c570003c" rw_flags="RW" width="1" name="PCM_MEM_DEBUG_SEL_I1" comment="Debug select register for MEM_CTRL_PCM"/>
    <register addr="c5700040" rw_flags="RW" width="1" name="PCM_TOP_DEBUG_SEL_I1" comment="Top level Debug bus select for PCM"/>
    <register addr="c5700044" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[0]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5700048" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[1]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c570004c" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[2]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5700050" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[3]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5700054" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[4]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c5700058" rw_flags="R" width="2" name="PCM_FIFO_SIZE_I1[5]" comment="Reads back how full the FIFO is (in bytes not samples)."/>
    <register addr="c570005c" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[0]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5700060" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[1]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5700064" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[2]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5700068" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[3]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c570006c" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[4]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5700070" rw_flags="RW" width="2" name="PCM_FIFO_WATER_MARK_I1[5]" comment="Sets the level (in bytes) when interrupts are generated."/>
    <register addr="c5700074" rw_flags="RW" width="4" name="PCM_INT_EN_I1" comment="Interrupt sources enable."/>
    <register addr="c5700078" rw_flags="R" width="4" name="PCM_INT_STATUS_I1" comment="Status of Interrupt sources."/>
    <register addr="c570007c" rw_flags="W" width="4" name="PCM_INT_CLEAR_I1" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c5700080" rw_flags="RW" width="2" name="PCM_INT_WATER_EN_I1" comment="Interrupt sources enable for the water mark indicators."/>
    <register addr="c5700084" rw_flags="R" width="2" name="PCM_INT_WATER_STATUS_I1" comment="Status of Interrupt sources."/>
    <register addr="c5700088" rw_flags="W" width="2" name="PCM_INT_WATER_CLEAR_I1" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c570008c" rw_flags="RW" width="2" name="PCM_FIFO_WIDTH_I1" comment="Sets the width of each FIFO"/>
    <register addr="c5700090" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_0_I1" comment="Writes to fifo 0"/>
    <register addr="c5700094" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_1_I1" comment="Writes to fifo 0"/>
    <register addr="c5700098" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_2_I1" comment="Writes to fifo 0"/>
    <register addr="c570009c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_3_I1" comment="Writes to fifo 0"/>
    <register addr="c57000a0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_4_I1" comment="Writes to fifo 0"/>
    <register addr="c57000a4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_5_I1" comment="Writes to fifo 0"/>
    <register addr="c57000a8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_6_I1" comment="Writes to fifo 0"/>
    <register addr="c57000ac" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_7_I1" comment="Writes to fifo 0"/>
    <register addr="c57000b0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_8_I1" comment="Writes to fifo 0"/>
    <register addr="c57000b4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_9_I1" comment="Writes to fifo 0"/>
    <register addr="c57000b8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_10_I1" comment="Writes to fifo 0"/>
    <register addr="c57000bc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_11_I1" comment="Writes to fifo 0"/>
    <register addr="c57000c0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_12_I1" comment="Writes to fifo 0"/>
    <register addr="c57000c4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_13_I1" comment="Writes to fifo 0"/>
    <register addr="c57000c8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_14_I1" comment="Writes to fifo 0"/>
    <register addr="c57000cc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_0_15_I1" comment="Writes to fifo 0"/>
    <register addr="c57000d0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_0_I1" comment="Writes to fifo 1"/>
    <register addr="c57000d4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_1_I1" comment="Writes to fifo 1"/>
    <register addr="c57000d8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_2_I1" comment="Writes to fifo 1"/>
    <register addr="c57000dc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_3_I1" comment="Writes to fifo 1"/>
    <register addr="c57000e0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_4_I1" comment="Writes to fifo 1"/>
    <register addr="c57000e4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_5_I1" comment="Writes to fifo 1"/>
    <register addr="c57000e8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_6_I1" comment="Writes to fifo 1"/>
    <register addr="c57000ec" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_7_I1" comment="Writes to fifo 1"/>
    <register addr="c57000f0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_8_I1" comment="Writes to fifo 1"/>
    <register addr="c57000f4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_9_I1" comment="Writes to fifo 1"/>
    <register addr="c57000f8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_10_I1" comment="Writes to fifo 1"/>
    <register addr="c57000fc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_11_I1" comment="Writes to fifo 1"/>
    <register addr="c5700100" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_12_I1" comment="Writes to fifo 1"/>
    <register addr="c5700104" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_13_I1" comment="Writes to fifo 1"/>
    <register addr="c5700108" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_14_I1" comment="Writes to fifo 1"/>
    <register addr="c570010c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_1_15_I1" comment="Writes to fifo 1"/>
    <register addr="c5700110" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_0_I1" comment="Writes to fifo 2"/>
    <register addr="c5700114" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_1_I1" comment="Writes to fifo 2"/>
    <register addr="c5700118" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_2_I1" comment="Writes to fifo 2"/>
    <register addr="c570011c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_3_I1" comment="Writes to fifo 2"/>
    <register addr="c5700120" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_4_I1" comment="Writes to fifo 2"/>
    <register addr="c5700124" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_5_I1" comment="Writes to fifo 2"/>
    <register addr="c5700128" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_6_I1" comment="Writes to fifo 2"/>
    <register addr="c570012c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_7_I1" comment="Writes to fifo 2"/>
    <register addr="c5700130" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_8_I1" comment="Writes to fifo 2"/>
    <register addr="c5700134" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_9_I1" comment="Writes to fifo 2"/>
    <register addr="c5700138" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_10_I1" comment="Writes to fifo 2"/>
    <register addr="c570013c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_11_I1" comment="Writes to fifo 2"/>
    <register addr="c5700140" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_12_I1" comment="Writes to fifo 2"/>
    <register addr="c5700144" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_13_I1" comment="Writes to fifo 2"/>
    <register addr="c5700148" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_14_I1" comment="Writes to fifo 2"/>
    <register addr="c570014c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_2_15_I1" comment="Writes to fifo 2"/>
    <register addr="c5700150" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_0_I1" comment="Writes to fifo 3"/>
    <register addr="c5700154" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_1_I1" comment="Writes to fifo 3"/>
    <register addr="c5700158" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_2_I1" comment="Writes to fifo 3"/>
    <register addr="c570015c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_3_I1" comment="Writes to fifo 3"/>
    <register addr="c5700160" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_4_I1" comment="Writes to fifo 3"/>
    <register addr="c5700164" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_5_I1" comment="Writes to fifo 3"/>
    <register addr="c5700168" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_6_I1" comment="Writes to fifo 3"/>
    <register addr="c570016c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_7_I1" comment="Writes to fifo 3"/>
    <register addr="c5700170" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_8_I1" comment="Writes to fifo 3"/>
    <register addr="c5700174" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_9_I1" comment="Writes to fifo 3"/>
    <register addr="c5700178" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_10_I1" comment="Writes to fifo 3"/>
    <register addr="c570017c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_11_I1" comment="Writes to fifo 3"/>
    <register addr="c5700180" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_12_I1" comment="Writes to fifo 3"/>
    <register addr="c5700184" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_13_I1" comment="Writes to fifo 3"/>
    <register addr="c5700188" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_14_I1" comment="Writes to fifo 3"/>
    <register addr="c570018c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_3_15_I1" comment="Writes to fifo 3"/>
    <register addr="c5700190" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_0_I1" comment="Writes to fifo 4"/>
    <register addr="c5700194" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_1_I1" comment="Writes to fifo 4"/>
    <register addr="c5700198" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_2_I1" comment="Writes to fifo 4"/>
    <register addr="c570019c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_3_I1" comment="Writes to fifo 4"/>
    <register addr="c57001a0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_4_I1" comment="Writes to fifo 4"/>
    <register addr="c57001a4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_5_I1" comment="Writes to fifo 4"/>
    <register addr="c57001a8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_6_I1" comment="Writes to fifo 4"/>
    <register addr="c57001ac" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_7_I1" comment="Writes to fifo 4"/>
    <register addr="c57001b0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_8_I1" comment="Writes to fifo 4"/>
    <register addr="c57001b4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_9_I1" comment="Writes to fifo 4"/>
    <register addr="c57001b8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_10_I1" comment="Writes to fifo 4"/>
    <register addr="c57001bc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_11_I1" comment="Writes to fifo 4"/>
    <register addr="c57001c0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_12_I1" comment="Writes to fifo 4"/>
    <register addr="c57001c4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_13_I1" comment="Writes to fifo 4"/>
    <register addr="c57001c8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_14_I1" comment="Writes to fifo 4"/>
    <register addr="c57001cc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_4_15_I1" comment="Writes to fifo 4"/>
    <register addr="c57001d0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_0_I1" comment="Writes to fifo 5"/>
    <register addr="c57001d4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_1_I1" comment="Writes to fifo 5"/>
    <register addr="c57001d8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_2_I1" comment="Writes to fifo 5"/>
    <register addr="c57001dc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_3_I1" comment="Writes to fifo 5"/>
    <register addr="c57001e0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_4_I1" comment="Writes to fifo 5"/>
    <register addr="c57001e4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_5_I1" comment="Writes to fifo 5"/>
    <register addr="c57001e8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_6_I1" comment="Writes to fifo 5"/>
    <register addr="c57001ec" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_7_I1" comment="Writes to fifo 5"/>
    <register addr="c57001f0" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_8_I1" comment="Writes to fifo 5"/>
    <register addr="c57001f4" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_9_I1" comment="Writes to fifo 5"/>
    <register addr="c57001f8" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_10_I1" comment="Writes to fifo 5"/>
    <register addr="c57001fc" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_11_I1" comment="Writes to fifo 5"/>
    <register addr="c5700200" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_12_I1" comment="Writes to fifo 5"/>
    <register addr="c5700204" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_13_I1" comment="Writes to fifo 5"/>
    <register addr="c5700208" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_14_I1" comment="Writes to fifo 5"/>
    <register addr="c570020c" rw_flags="W" width="4" name="PCM_WRITE_FIFO_5_15_I1" comment="Writes to fifo 5"/>
    <register addr="c5700210" rw_flags="R" width="4" name="PCM_READ_FIFO_0_0_I1" comment="Read from fifo 0"/>
    <register addr="c5700214" rw_flags="R" width="4" name="PCM_READ_FIFO_0_1_I1" comment="Read from fifo 0"/>
    <register addr="c5700218" rw_flags="R" width="4" name="PCM_READ_FIFO_0_2_I1" comment="Read from fifo 0"/>
    <register addr="c570021c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_3_I1" comment="Read from fifo 0"/>
    <register addr="c5700220" rw_flags="R" width="4" name="PCM_READ_FIFO_0_4_I1" comment="Read from fifo 0"/>
    <register addr="c5700224" rw_flags="R" width="4" name="PCM_READ_FIFO_0_5_I1" comment="Read from fifo 0"/>
    <register addr="c5700228" rw_flags="R" width="4" name="PCM_READ_FIFO_0_6_I1" comment="Read from fifo 0"/>
    <register addr="c570022c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_7_I1" comment="Read from fifo 0"/>
    <register addr="c5700230" rw_flags="R" width="4" name="PCM_READ_FIFO_0_8_I1" comment="Read from fifo 0"/>
    <register addr="c5700234" rw_flags="R" width="4" name="PCM_READ_FIFO_0_9_I1" comment="Read from fifo 0"/>
    <register addr="c5700238" rw_flags="R" width="4" name="PCM_READ_FIFO_0_10_I1" comment="Read from fifo 0"/>
    <register addr="c570023c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_11_I1" comment="Read from fifo 0"/>
    <register addr="c5700240" rw_flags="R" width="4" name="PCM_READ_FIFO_0_12_I1" comment="Read from fifo 0"/>
    <register addr="c5700244" rw_flags="R" width="4" name="PCM_READ_FIFO_0_13_I1" comment="Read from fifo 0"/>
    <register addr="c5700248" rw_flags="R" width="4" name="PCM_READ_FIFO_0_14_I1" comment="Read from fifo 0"/>
    <register addr="c570024c" rw_flags="R" width="4" name="PCM_READ_FIFO_0_15_I1" comment="Read from fifo 0"/>
    <register addr="c5700250" rw_flags="R" width="4" name="PCM_READ_FIFO_1_0_I1" comment="Read from fifo 1"/>
    <register addr="c5700254" rw_flags="R" width="4" name="PCM_READ_FIFO_1_1_I1" comment="Read from fifo 1"/>
    <register addr="c5700258" rw_flags="R" width="4" name="PCM_READ_FIFO_1_2_I1" comment="Read from fifo 1"/>
    <register addr="c570025c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_3_I1" comment="Read from fifo 1"/>
    <register addr="c5700260" rw_flags="R" width="4" name="PCM_READ_FIFO_1_4_I1" comment="Read from fifo 1"/>
    <register addr="c5700264" rw_flags="R" width="4" name="PCM_READ_FIFO_1_5_I1" comment="Read from fifo 1"/>
    <register addr="c5700268" rw_flags="R" width="4" name="PCM_READ_FIFO_1_6_I1" comment="Read from fifo 1"/>
    <register addr="c570026c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_7_I1" comment="Read from fifo 1"/>
    <register addr="c5700270" rw_flags="R" width="4" name="PCM_READ_FIFO_1_8_I1" comment="Read from fifo 1"/>
    <register addr="c5700274" rw_flags="R" width="4" name="PCM_READ_FIFO_1_9_I1" comment="Read from fifo 1"/>
    <register addr="c5700278" rw_flags="R" width="4" name="PCM_READ_FIFO_1_10_I1" comment="Read from fifo 1"/>
    <register addr="c570027c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_11_I1" comment="Read from fifo 1"/>
    <register addr="c5700280" rw_flags="R" width="4" name="PCM_READ_FIFO_1_12_I1" comment="Read from fifo 1"/>
    <register addr="c5700284" rw_flags="R" width="4" name="PCM_READ_FIFO_1_13_I1" comment="Read from fifo 1"/>
    <register addr="c5700288" rw_flags="R" width="4" name="PCM_READ_FIFO_1_14_I1" comment="Read from fifo 1"/>
    <register addr="c570028c" rw_flags="R" width="4" name="PCM_READ_FIFO_1_15_I1" comment="Read from fifo 1"/>
    <register addr="c5700290" rw_flags="R" width="4" name="PCM_READ_FIFO_2_0_I1" comment="Read from fifo 2"/>
    <register addr="c5700294" rw_flags="R" width="4" name="PCM_READ_FIFO_2_1_I1" comment="Read from fifo 2"/>
    <register addr="c5700298" rw_flags="R" width="4" name="PCM_READ_FIFO_2_2_I1" comment="Read from fifo 2"/>
    <register addr="c570029c" rw_flags="R" width="4" name="PCM_READ_FIFO_2_3_I1" comment="Read from fifo 2"/>
    <register addr="c57002a0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_4_I1" comment="Read from fifo 2"/>
    <register addr="c57002a4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_5_I1" comment="Read from fifo 2"/>
    <register addr="c57002a8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_6_I1" comment="Read from fifo 2"/>
    <register addr="c57002ac" rw_flags="R" width="4" name="PCM_READ_FIFO_2_7_I1" comment="Read from fifo 2"/>
    <register addr="c57002b0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_8_I1" comment="Read from fifo 2"/>
    <register addr="c57002b4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_9_I1" comment="Read from fifo 2"/>
    <register addr="c57002b8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_10_I1" comment="Read from fifo 2"/>
    <register addr="c57002bc" rw_flags="R" width="4" name="PCM_READ_FIFO_2_11_I1" comment="Read from fifo 2"/>
    <register addr="c57002c0" rw_flags="R" width="4" name="PCM_READ_FIFO_2_12_I1" comment="Read from fifo 2"/>
    <register addr="c57002c4" rw_flags="R" width="4" name="PCM_READ_FIFO_2_13_I1" comment="Read from fifo 2"/>
    <register addr="c57002c8" rw_flags="R" width="4" name="PCM_READ_FIFO_2_14_I1" comment="Read from fifo 2"/>
    <register addr="c57002cc" rw_flags="R" width="4" name="PCM_READ_FIFO_2_15_I1" comment="Read from fifo 2"/>
    <register addr="c57002d0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_0_I1" comment="Read from fifo 3"/>
    <register addr="c57002d4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_1_I1" comment="Read from fifo 3"/>
    <register addr="c57002d8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_2_I1" comment="Read from fifo 3"/>
    <register addr="c57002dc" rw_flags="R" width="4" name="PCM_READ_FIFO_3_3_I1" comment="Read from fifo 3"/>
    <register addr="c57002e0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_4_I1" comment="Read from fifo 3"/>
    <register addr="c57002e4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_5_I1" comment="Read from fifo 3"/>
    <register addr="c57002e8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_6_I1" comment="Read from fifo 3"/>
    <register addr="c57002ec" rw_flags="R" width="4" name="PCM_READ_FIFO_3_7_I1" comment="Read from fifo 3"/>
    <register addr="c57002f0" rw_flags="R" width="4" name="PCM_READ_FIFO_3_8_I1" comment="Read from fifo 3"/>
    <register addr="c57002f4" rw_flags="R" width="4" name="PCM_READ_FIFO_3_9_I1" comment="Read from fifo 3"/>
    <register addr="c57002f8" rw_flags="R" width="4" name="PCM_READ_FIFO_3_10_I1" comment="Read from fifo 3"/>
    <register addr="c57002fc" rw_flags="R" width="4" name="PCM_READ_FIFO_3_11_I1" comment="Read from fifo 3"/>
    <register addr="c5700300" rw_flags="R" width="4" name="PCM_READ_FIFO_3_12_I1" comment="Read from fifo 3"/>
    <register addr="c5700304" rw_flags="R" width="4" name="PCM_READ_FIFO_3_13_I1" comment="Read from fifo 3"/>
    <register addr="c5700308" rw_flags="R" width="4" name="PCM_READ_FIFO_3_14_I1" comment="Read from fifo 3"/>
    <register addr="c570030c" rw_flags="R" width="4" name="PCM_READ_FIFO_3_15_I1" comment="Read from fifo 3"/>
    <register addr="c5700310" rw_flags="R" width="4" name="PCM_READ_FIFO_4_0_I1" comment="Read from fifo 4"/>
    <register addr="c5700314" rw_flags="R" width="4" name="PCM_READ_FIFO_4_1_I1" comment="Read from fifo 4"/>
    <register addr="c5700318" rw_flags="R" width="4" name="PCM_READ_FIFO_4_2_I1" comment="Read from fifo 4"/>
    <register addr="c570031c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_3_I1" comment="Read from fifo 4"/>
    <register addr="c5700320" rw_flags="R" width="4" name="PCM_READ_FIFO_4_4_I1" comment="Read from fifo 4"/>
    <register addr="c5700324" rw_flags="R" width="4" name="PCM_READ_FIFO_4_5_I1" comment="Read from fifo 4"/>
    <register addr="c5700328" rw_flags="R" width="4" name="PCM_READ_FIFO_4_6_I1" comment="Read from fifo 4"/>
    <register addr="c570032c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_7_I1" comment="Read from fifo 4"/>
    <register addr="c5700330" rw_flags="R" width="4" name="PCM_READ_FIFO_4_8_I1" comment="Read from fifo 4"/>
    <register addr="c5700334" rw_flags="R" width="4" name="PCM_READ_FIFO_4_9_I1" comment="Read from fifo 4"/>
    <register addr="c5700338" rw_flags="R" width="4" name="PCM_READ_FIFO_4_10_I1" comment="Read from fifo 4"/>
    <register addr="c570033c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_11_I1" comment="Read from fifo 4"/>
    <register addr="c5700340" rw_flags="R" width="4" name="PCM_READ_FIFO_4_12_I1" comment="Read from fifo 4"/>
    <register addr="c5700344" rw_flags="R" width="4" name="PCM_READ_FIFO_4_13_I1" comment="Read from fifo 4"/>
    <register addr="c5700348" rw_flags="R" width="4" name="PCM_READ_FIFO_4_14_I1" comment="Read from fifo 4"/>
    <register addr="c570034c" rw_flags="R" width="4" name="PCM_READ_FIFO_4_15_I1" comment="Read from fifo 4"/>
    <register addr="c5700350" rw_flags="R" width="4" name="PCM_READ_FIFO_5_0_I1" comment="Read from fifo 5"/>
    <register addr="c5700354" rw_flags="R" width="4" name="PCM_READ_FIFO_5_1_I1" comment="Read from fifo 5"/>
    <register addr="c5700358" rw_flags="R" width="4" name="PCM_READ_FIFO_5_2_I1" comment="Read from fifo 5"/>
    <register addr="c570035c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_3_I1" comment="Read from fifo 5"/>
    <register addr="c5700360" rw_flags="R" width="4" name="PCM_READ_FIFO_5_4_I1" comment="Read from fifo 5"/>
    <register addr="c5700364" rw_flags="R" width="4" name="PCM_READ_FIFO_5_5_I1" comment="Read from fifo 5"/>
    <register addr="c5700368" rw_flags="R" width="4" name="PCM_READ_FIFO_5_6_I1" comment="Read from fifo 5"/>
    <register addr="c570036c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_7_I1" comment="Read from fifo 5"/>
    <register addr="c5700370" rw_flags="R" width="4" name="PCM_READ_FIFO_5_8_I1" comment="Read from fifo 5"/>
    <register addr="c5700374" rw_flags="R" width="4" name="PCM_READ_FIFO_5_9_I1" comment="Read from fifo 5"/>
    <register addr="c5700378" rw_flags="R" width="4" name="PCM_READ_FIFO_5_10_I1" comment="Read from fifo 5"/>
    <register addr="c570037c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_11_I1" comment="Read from fifo 5"/>
    <register addr="c5700380" rw_flags="R" width="4" name="PCM_READ_FIFO_5_12_I1" comment="Read from fifo 5"/>
    <register addr="c5700384" rw_flags="R" width="4" name="PCM_READ_FIFO_5_13_I1" comment="Read from fifo 5"/>
    <register addr="c5700388" rw_flags="R" width="4" name="PCM_READ_FIFO_5_14_I1" comment="Read from fifo 5"/>
    <register addr="c570038c" rw_flags="R" width="4" name="PCM_READ_FIFO_5_15_I1" comment="Read from fifo 5"/>
    <register addr="c5700390" rw_flags="W" width="1" name="PCM_FIFO_CMD_I1" comment="A set of instructions for the manulipation of FIFO's"/>
  </block>
  <block name="pcr_config" comment="WLAN Processor platform configuration - ">
    <register addr="c0000000" rw_flags="R" width="4" name="PCR_VERSION" comment="Connected to CHIP_VERSION_ID from the pmu_remap register block."/>
    <register addr="c0000004" rw_flags="R" width="2" name="PCR_PERI_REGISTER_HASH" comment="Contains a 32bit hash of all the PERI register tree source used in the IP"/>
    <register addr="c0000008" rw_flags="RW" width="1" name="PCR_RST_CONFIG" comment="Processor platform reset configuration."/>
    <register addr="c000000c" rw_flags="RW" width="1" name="PCR_RTC_IRQ_EN" comment="RTC Interrupt enable. Any writes to this register also clear any RTC interrupt."/>
    <register addr="c0000010" rw_flags="RW" width="4" name="PCR_SYSTEM_CTRL" comment="Processor platform general system control."/>
    <register addr="c0000014" rw_flags="RW" width="1" name="PCR_WL_ADC_COMMON_CFG" comment=""/>
    <register addr="c0000018" rw_flags="RW" width="4" name="PCR_WL_ADC0_CFG" comment=""/>
    <register addr="c000001c" rw_flags="RW" width="4" name="PCR_WL_ADC1_CFG" comment=""/>
    <register addr="c0000020" rw_flags="RW" width="2" name="PCR_WL_DAC0_CFG" comment=""/>
    <register addr="c0000024" rw_flags="RW" width="2" name="PCR_WL_DAC1_CFG" comment=""/>
    <register addr="c0000028" rw_flags="RW" width="4" name="PCR_WL_DAC0_CTR_CM" comment="Bit [23] is OR'd with WL_RADIO_TX_DAC_EN, so don't set [23] to 1 in this register unless you want to force it on."/>
    <register addr="c000002c" rw_flags="RW" width="4" name="PCR_WL_DAC1_CTR_CM" comment="Bit [23] is OR'd with WL_RADIO_TX_DAC_EN, so don't set [23] to 1 in this register unless you want to force it on."/>
    <register addr="c0000030" rw_flags="RW" width="4" name="PCR_WL_ADC0_CTRLI" comment=""/>
    <register addr="c0000034" rw_flags="RW" width="4" name="PCR_WL_ADC0_CTRLQ" comment=""/>
    <register addr="c0000038" rw_flags="RW" width="4" name="PCR_WL_ADC1_CTRLI" comment=""/>
    <register addr="c000003c" rw_flags="RW" width="4" name="PCR_WL_ADC1_CTRLQ" comment=""/>
    <register addr="c0000040" rw_flags="RW" width="4" name="PCR_WL_DAC0_CTRLI" comment=""/>
    <register addr="c0000044" rw_flags="RW" width="4" name="PCR_WL_DAC0_CTRLQ" comment=""/>
    <register addr="c0000048" rw_flags="RW" width="4" name="PCR_WL_DAC1_CTRLI" comment=""/>
    <register addr="c000004c" rw_flags="RW" width="4" name="PCR_WL_DAC1_CTRLQ" comment=""/>
    <register addr="c0000050" rw_flags="RW" width="1" name="PCR_WL_ADC0_PHYIF" comment=""/>
    <register addr="c0000054" rw_flags="RW" width="1" name="PCR_WL_ADC1_PHYIF" comment=""/>
    <register addr="c0000058" rw_flags="RW" width="4" name="PCR_PIO_DRIVE" comment="PIO output values for PIO[16:0]"/>
    <register addr="c000005c" rw_flags="RW" width="4" name="PCR_PIO_DRIVE_EN" comment="PIO output enable for PIO[16:0]"/>
    <register addr="c0000060" rw_flags="R" width="4" name="PCR_PIO_STATUS" comment="PIO status values for PIO[16:0]"/>
    <register addr="c0000064" rw_flags="RW" width="4" name="PCR_QOS" comment="Quality of service values for the NIC-400 matrix AXI masters."/>
    <register addr="c0000068" rw_flags="RW" width="1" name="PCR_RMP_RGN0_BOOT" comment="PROC0 Boot Address Remapping Region 0 Enable"/>
    <register addr="c000006c" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[0]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c0000070" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[1]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c0000074" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[2]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c0000078" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[3]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c000007c" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[4]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c0000080" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[5]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="c0000084" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[0]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c0000088" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[1]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c000008c" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[2]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c0000090" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[3]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c0000094" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[4]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c0000098" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[5]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="c000009c" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[0]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000a0" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[1]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000a4" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[2]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000a8" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[3]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000ac" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[4]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000b0" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[5]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="c00000b4" rw_flags="RW" width="1" name="PCR_MEMARB_QOS_EN" comment="Memory arbiters QoS enable."/>
    <register addr="c00000b8" rw_flags="RW" width="1" name="PCR_QREQ_OFF_XDMA" comment="XDMA Q-channel override. Setting to '1' overrides the Q-channel clock gating and forces the clock gate on."/>
    <register addr="c00000bc" rw_flags="RW" width="2" name="PCR_DRAM_EARLY_WAKEUP" comment="DRAM early wakeup counter setting. When this changes from zero to non-zero this triggers the logic to capture the new non-zero value."/>
    <register addr="c00000c0" rw_flags="RW" width="1" name="PCR_FLEXI_PROC_POR_RESET" comment="FlexiMac processor power-on reset software control. This resets all of the M3 logic."/>
    <register addr="c00000c4" rw_flags="RW" width="1" name="PCR_FLEXI_PROC_SYS_RESET" comment="FlexiMac processor sys reset control. This resets just the core logic, not the debug logic."/>
    <register addr="c00000c8" rw_flags="RW" width="1" name="PCR_FLEXI_MTX_CLOCK_EN" comment="FlexiMac processor platform interconnect matrix clock enables."/>
    <register addr="c00000cc" rw_flags="RW" width="4" name="PCR_QEXP" comment="Q-channel controller clock gate enable timeouts, measured in clock cycles. The number of clock cycles to extend the outgoing clock gate enable after the incoming active signal is deasserted."/>
    <register addr="c00000d0" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[0]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000d4" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[1]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000d8" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[2]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000dc" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[3]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000e0" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[4]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000e4" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[5]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000e8" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[6]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000ec" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[7]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="c00000f0" rw_flags="R" width="4" name="PCR_REGS_FAILED_ADDRESS" comment="Address of last register access that failed to complete successfully, usually resulting in a CPU abort of some sort."/>
    <register addr="c00000f4" rw_flags="RW" width="1" name="PCR_REGS_STATUS" comment="Observe the register bus failure status. Write to a field to clear it."/>
    <register addr="c00000f8" rw_flags="R" width="2" name="RANDOM_NUMBER" comment="Random number. Enable generation by setting CLOCK_ENABLE_40_RAND to '1'."/>
    <register addr="c00000fc" rw_flags="RW" width="1" name="PCR_PMU_IPC_INT" comment="Inter-processor interrupt signal to the PMU. Nothing fancy, just a single bit you set high or low. Usually setting it high will generate an interrupt in the PMU but that depends how the PMU works. You'll need to de-assert it once the PMU has received the interrupt so some sort of protocol should be arranged."/>
    <register addr="c0000100" rw_flags="RW" width="1" name="MIF_AXI_READ_REJECT_EN" comment="Enable the block which prevents out-of-range MIF accesses going to the SOC and causing ITMON reports. This block intercepts the error address AXI transactions, stops them reaching the MIF longhop, and returns the appropriate number of error-laden read response beats for that burst."/>
    <register addr="c0000104" rw_flags="RW" width="1" name="PCR_DEBUG_SEL" comment="Processor platform debug selection"/>
    <register addr="c0000108" rw_flags="RW" width="2" name="FREQ_COUNT_CTRL" comment="Control the frequency counter."/>
    <register addr="c000010c" rw_flags="R" width="4" name="FREQ_COUNT_STATUS" comment="Check the status and results of frequency counter."/>
    <register addr="c0000110" rw_flags="RW" width="1" name="PCR_SEMAPHORE[0]" comment="Array of single bit semaphore registers."/>
    <register addr="c0000114" rw_flags="RW" width="1" name="PCR_SEMAPHORE[1]" comment="Array of single bit semaphore registers."/>
    <register addr="c0000118" rw_flags="RW" width="1" name="PCR_SEMAPHORE[2]" comment="Array of single bit semaphore registers."/>
    <register addr="c000011c" rw_flags="RW" width="1" name="PCR_SEMAPHORE[3]" comment="Array of single bit semaphore registers."/>
    <register addr="c0000120" rw_flags="W" width="1" name="PCR_MAC_IF_PREFETCHER_FLUSH" comment="Write '1' to a bit to cause the appropriate MAC IF prefetcher block to invalidate the contents of its prefetch buffer."/>
    <register addr="c0000124" rw_flags="RW" width="1" name="PCR_ETM_EXT_ENABLE_MASK" comment="Bitfield. Enable bit(s) to allow the ETM EXT bus from the R7 to propagate to the CoreSight block.."/>
  </block>
  <block name="pcr_ticker" comment="Processor basic timer">
    <register addr="c0100000" rw_flags="R" width="4" name="TCKR_VALUE" comment="Current value of the ticker"/>
    <register addr="c0100004" rw_flags="RW" width="4" name="TCKR_SET_VALUE" comment="Set a new value of the ticker"/>
    <register addr="c0100008" rw_flags="RW" width="4" name="TCKR_ALARM[0]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="c010000c" rw_flags="RW" width="4" name="TCKR_ALARM[1]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="c0100010" rw_flags="RW" width="4" name="TCKR_ALARM[2]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="c0100014" rw_flags="RW" width="4" name="TCKR_ALARM[3]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="c0100018" rw_flags="RW" width="4" name="TCKR_ALARM[4]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="c010001c" rw_flags="RW" width="4" name="TCKR_TIMESTAMP_CTRL" comment="Control of timestamping"/>
    <register addr="c0100020" rw_flags="R" width="4" name="TCKR_TIMESTAMP0_COARSE_VAL" comment="Timestamp 0 block microsecond count"/>
    <register addr="c0100024" rw_flags="R" width="4" name="TCKR_TIMESTAMP1_COARSE_VAL" comment="Timestamp 1 block microsecond count"/>
    <register addr="c0100028" rw_flags="R" width="4" name="TCKR_TIMESTAMP2_COARSE_VAL" comment="Timestamp 2 block microsecond count"/>
    <register addr="c010002c" rw_flags="R" width="4" name="TCKR_TIMESTAMP3_COARSE_VAL" comment="Timestamp 3 block microsecond count"/>
    <register addr="c0100030" rw_flags="R" width="2" name="TCKR_TIMESTAMP0_FINE_VAL" comment="Timestamp 0 block 1/480 microsecond count"/>
    <register addr="c0100034" rw_flags="R" width="2" name="TCKR_TIMESTAMP1_FINE_VAL" comment="Timestamp 1 block 1/480 microsecond count"/>
    <register addr="c0100038" rw_flags="R" width="2" name="TCKR_TIMESTAMP2_FINE_VAL" comment="Timestamp 2 block 1/480 microsecond count"/>
    <register addr="c010003c" rw_flags="R" width="2" name="TCKR_TIMESTAMP3_FINE_VAL" comment="Timestamp 3 block 1/480 microsecond count"/>
    <register addr="c0100040" rw_flags="R" width="1" name="TCKR_TIMESTAMP_OCCURRED" comment="Timestamp edge has happened (one bit for each block)"/>
    <register addr="c0100044" rw_flags="W" width="1" name="TCKR_TIMESTAMP_OCCURRED_CLEAR" comment="Clears corresponding TIMESTAMP_OCCURRED flag"/>
    <register addr="c0100048" rw_flags="RW" width="1" name="TCKR_CTRL[0]" comment="The Proc alarm control register"/>
    <register addr="c010004c" rw_flags="RW" width="1" name="TCKR_CTRL[1]" comment="The Proc alarm control register"/>
    <register addr="c0100050" rw_flags="RW" width="1" name="TCKR_CTRL[2]" comment="The Proc alarm control register"/>
    <register addr="c0100054" rw_flags="RW" width="1" name="TCKR_CTRL[3]" comment="The Proc alarm control register"/>
    <register addr="c0100058" rw_flags="RW" width="1" name="TCKR_CTRL[4]" comment="The Proc alarm control register"/>
    <register addr="c010005c" rw_flags="RW" width="2" name="TCKR_CLK_SCALE" comment="Ticker clock scale value. Should be the same as the ticker clock frequency in MHz as that produces a strobe every 1us."/>
  </block>
  <block name="pio_mux" comment="PIO mux control">
    <register addr="c2000000" rw_flags="RW" width="4" name="PIO_INVERT_ENABLES" comment="Set a bit to 1 to invert the driven output."/>
    <register addr="c2000004" rw_flags="R" width="4" name="PIO_INPUT_STATUS" comment="The PIO input status(after loopback)."/>
    <register addr="c2000008" rw_flags="R" width="4" name="PIO_OUTPUT_STATUS" comment="The PIO output status."/>
    <register addr="c200000c" rw_flags="RW" width="2" name="PIO_CFG[0]" comment=""/>
    <register addr="c2000010" rw_flags="RW" width="2" name="PIO_CFG[1]" comment=""/>
    <register addr="c2000014" rw_flags="RW" width="2" name="PIO_CFG[2]" comment=""/>
    <register addr="c2000018" rw_flags="RW" width="2" name="PIO_CFG[3]" comment=""/>
    <register addr="c200001c" rw_flags="RW" width="2" name="PIO_CFG[4]" comment=""/>
    <register addr="c2000020" rw_flags="RW" width="2" name="PIO_CFG[5]" comment=""/>
    <register addr="c2000024" rw_flags="RW" width="2" name="PIO_CFG[6]" comment=""/>
    <register addr="c2000028" rw_flags="RW" width="2" name="PIO_CFG[7]" comment=""/>
    <register addr="c200002c" rw_flags="RW" width="2" name="PIO_CFG[8]" comment=""/>
    <register addr="c2000030" rw_flags="RW" width="2" name="PIO_CFG[9]" comment=""/>
    <register addr="c2000034" rw_flags="RW" width="2" name="PIO_CFG[10]" comment=""/>
    <register addr="c2000038" rw_flags="RW" width="2" name="PIO_CFG[11]" comment=""/>
    <register addr="c200003c" rw_flags="RW" width="2" name="PIO_CFG[12]" comment=""/>
    <register addr="c2000040" rw_flags="RW" width="2" name="PIO_CFG[13]" comment=""/>
    <register addr="c2000044" rw_flags="RW" width="2" name="PIO_CFG[14]" comment=""/>
    <register addr="c2000048" rw_flags="RW" width="2" name="PIO_CFG[15]" comment=""/>
    <register addr="c200004c" rw_flags="RW" width="2" name="PIO_CFG[16]" comment=""/>
    <register addr="c2000050" rw_flags="RW" width="4" name="DEBUG_SERIALISER_CFG" comment=""/>
    <register addr="c2000054" rw_flags="RW" width="4" name="PMU_SERIALISER_CFG" comment=""/>
    <register addr="c2000058" rw_flags="RW" width="4" name="PP_SERIALISER_CFG" comment=""/>
    <register addr="c200005c" rw_flags="RW" width="4" name="WL_SERIALISER_CFG" comment=""/>
    <register addr="c2000060" rw_flags="RW" width="4" name="PHY_HI_SERIALISER_CFG" comment=""/>
    <register addr="c2000064" rw_flags="RW" width="4" name="PHY_LO_SERIALISER_CFG" comment=""/>
    <register addr="c2000068" rw_flags="RW" width="4" name="BT_SERIALISER_CFG" comment=""/>
    <register addr="c200006c" rw_flags="RW" width="4" name="WPANENC_SERIALISER_CFG" comment=""/>
    <register addr="c2000070" rw_flags="RW" width="4" name="SH_PROC_SERIALISER_CFG" comment=""/>
    <register addr="c2000074" rw_flags="RW" width="4" name="PCM_SERIALISER_CFG" comment=""/>
    <register addr="c2000078" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL0_MUX_CTRL" comment=""/>
    <register addr="c200007c" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL1_MUX_CTRL" comment=""/>
    <register addr="c2000080" rw_flags="RW" width="1" name="BBIC_CAPTURE_TRIG_MUX_CTRL" comment=""/>
    <register addr="c2000084" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG" comment="Configuration for the RFIC debug de-serialisers"/>
    <register addr="c2000088" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG2" comment="Second configuration register for the RFIC debug de-serialisers"/>
    <register addr="c200008c" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG3" comment="Third configuration register for the RFIC debug de-serialisers"/>
    <register addr="c2000090" rw_flags="RW" width="2" name="DEBUG_DESERIALISER_CFG4" comment="Fourth configuration register for the RFIC debug de-serialisers"/>
    <register addr="c2000094" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_DECODE" comment="Count of errors since last cleared "/>
    <register addr="c2000098" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_SYNC" comment="Count of errors since last cleared "/>
    <register addr="c200009c" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_DISP" comment="Count of errors since last cleared "/>
    <register addr="c20000a0" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_CRC" comment="Count of errors since last cleared "/>
    <register addr="c20000a4" rw_flags="R" width="4" name="DEBUG_DESERIALISER_STATUS" comment="Status register for the RFIC debug de-serialisers"/>
    <register addr="c20000a8" rw_flags="R" width="4" name="DEBUG_DESERIALISER_MONITOR" comment="Monitor register for the RFIC debug de-serialisers"/>
  </block>
  <block name="wl_mac_0" comment="WLan MAC top level registers and enumerations for 802.11 protocol, Commands and Indications">
    <register addr="c5410000" rw_flags="RW" width="1" name="CLKGEN_MAC_ENABLES_I0" comment="This register enables clocks for MAC"/>
    <register addr="c5410004" rw_flags="RW" width="1" name="MAC_DEBUG_SEL_I0" comment="Select MAC debug port output (this is in addition to MAC IF and MAC ACC ports)"/>
    <register addr="c5410008" rw_flags="R" width="2" name="MAC_DEBUG_STATUS_I0" comment="Read MAC debug {MAC_ACC, MAC_IF}"/>
  </block>
  <block name="wl_mac_1" comment="WLan MAC top level registers and enumerations for 802.11 protocol, Commands and Indications">
    <register addr="c5420000" rw_flags="RW" width="1" name="CLKGEN_MAC_ENABLES_I1" comment="This register enables clocks for MAC"/>
    <register addr="c5420004" rw_flags="RW" width="1" name="MAC_DEBUG_SEL_I1" comment="Select MAC debug port output (this is in addition to MAC IF and MAC ACC ports)"/>
    <register addr="c5420008" rw_flags="R" width="2" name="MAC_DEBUG_STATUS_I1" comment="Read MAC debug {MAC_ACC, MAC_IF}"/>
  </block>
  <block name="wl_shared" comment="Wireless LAN shared registers">
    <register addr="c5400000" rw_flags="RW" width="1" name="WL_DEBUG_SEL" comment="Select for WLan_pd level debug mux"/>
    <register addr="c5400004" rw_flags="R" width="2" name="WL_DEBUG_STATUS" comment="Debug data at WLan_pd level"/>
    <register addr="c5400008" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_3_0" comment="Select for WLan_pd level debug mux"/>
    <register addr="c540000c" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_7_4" comment="Select for WLan_pd level debug mux"/>
    <register addr="c5400010" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_11_8" comment="Select for WLan_pd level debug mux"/>
    <register addr="c5400014" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_15_12" comment="Select for WLan_pd level debug mux"/>
    <register addr="c5400018" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_0_SEL" comment="Source bus select for intermediate bus 0 (select one of up to 32 busses)"/>
    <register addr="c540001c" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_1_SEL" comment="Source bus select for intermediate bus 1 (select one of up to 32 busses)"/>
    <register addr="c5400020" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_2_SEL" comment="Source bus select for intermediate bus 2 (select one of up to 32 busses)"/>
    <register addr="c5400024" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_3_SEL" comment="Source bus select for intermediate bus 3 (select one of up to 32 busses)"/>
  </block>
  <block name="xdmac_0" comment="XDMAC registers - derived from http://cognidox/vdocs/SC-507020-DD-A-XDMA%20Register%20Map.pdf">
    <register addr="c520000c" rw_flags="R" width="1" name="XDMAC_INT_TC_STATUS_I0" comment="Transfer Complete Interrupt Status Register."/>
    <register addr="c5200010" rw_flags="W" width="1" name="XDMAC_INT_TC_CLR_I0" comment="Transfer Complete Interrupt Clear Register (Value is not meaningful)"/>
    <register addr="c5200014" rw_flags="RW" width="1" name="XDMAC_INT_TC_MASK_I0" comment="Transfer Complete Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="c5200018" rw_flags="R" width="1" name="XDMAC_ERR_STATUS_I0" comment="Error Interrupt Status Register"/>
    <register addr="c520001c" rw_flags="W" width="1" name="XDMAC_INT_ERR_CLR_I0" comment="Error Interrupt Clear Register"/>
    <register addr="c5200020" rw_flags="RW" width="1" name="XDMAC_INT_ERR_MASK_I0" comment="Error Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="c5200024" rw_flags="W" width="1" name="XDMAC_START_I0" comment="DMA Transfer Start (Value is not meaningful). Do NOT start DMA again until the previously started DMA transfer is completed."/>
    <register addr="c5200028" rw_flags="RW" width="1" name="XDMAC_ICG_DISABLE_I0" comment="Internal clock gating is disabled (0 : Clock gating enabled, 1 : Clock gating disabled)"/>
    <register addr="c520002c" rw_flags="RW" width="4" name="XDMAC_CONFIG_I0" comment="Configuration Register"/>
    <register addr="c5200030" rw_flags="RW" width="4" name="XDMAC_LLI_SRC_ADDR_I0" comment="Source Address Register (Linked List Item)"/>
    <register addr="c5200034" rw_flags="RW" width="4" name="XDMAC_LLI_DST_ADDR_I0" comment="Destination Address Register (Linked List Item)"/>
    <register addr="c5200038" rw_flags="RW" width="4" name="XDMAC_LLI_NXT_ADDR_I0" comment="Next Address Register to indicate the next linked list item (Linked List Item)"/>
    <register addr="c520003c" rw_flags="RW" width="4" name="XDMAC_LLI_CTRL_I0" comment=""/>
    <register addr="c5200040" rw_flags="R" width="1" name="XDMAC_DMA_STATUS_I0" comment="DMA active status. 1 = active. 0 = idle"/>
    <register addr="c5200044" rw_flags="R" width="1" name="XDMAC_DMA_COUNT_I0" comment="Number of DMA list entries processed for the current operation."/>
  </block>
  <block name="xdmac_1" comment="XDMAC registers - derived from http://cognidox/vdocs/SC-507020-DD-A-XDMA%20Register%20Map.pdf">
    <register addr="c530000c" rw_flags="R" width="1" name="XDMAC_INT_TC_STATUS_I1" comment="Transfer Complete Interrupt Status Register."/>
    <register addr="c5300010" rw_flags="W" width="1" name="XDMAC_INT_TC_CLR_I1" comment="Transfer Complete Interrupt Clear Register (Value is not meaningful)"/>
    <register addr="c5300014" rw_flags="RW" width="1" name="XDMAC_INT_TC_MASK_I1" comment="Transfer Complete Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="c5300018" rw_flags="R" width="1" name="XDMAC_ERR_STATUS_I1" comment="Error Interrupt Status Register"/>
    <register addr="c530001c" rw_flags="W" width="1" name="XDMAC_INT_ERR_CLR_I1" comment="Error Interrupt Clear Register"/>
    <register addr="c5300020" rw_flags="RW" width="1" name="XDMAC_INT_ERR_MASK_I1" comment="Error Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="c5300024" rw_flags="W" width="1" name="XDMAC_START_I1" comment="DMA Transfer Start (Value is not meaningful). Do NOT start DMA again until the previously started DMA transfer is completed."/>
    <register addr="c5300028" rw_flags="RW" width="1" name="XDMAC_ICG_DISABLE_I1" comment="Internal clock gating is disabled (0 : Clock gating enabled, 1 : Clock gating disabled)"/>
    <register addr="c530002c" rw_flags="RW" width="4" name="XDMAC_CONFIG_I1" comment="Configuration Register"/>
    <register addr="c5300030" rw_flags="RW" width="4" name="XDMAC_LLI_SRC_ADDR_I1" comment="Source Address Register (Linked List Item)"/>
    <register addr="c5300034" rw_flags="RW" width="4" name="XDMAC_LLI_DST_ADDR_I1" comment="Destination Address Register (Linked List Item)"/>
    <register addr="c5300038" rw_flags="RW" width="4" name="XDMAC_LLI_NXT_ADDR_I1" comment="Next Address Register to indicate the next linked list item (Linked List Item)"/>
    <register addr="c530003c" rw_flags="RW" width="4" name="XDMAC_LLI_CTRL_I1" comment=""/>
    <register addr="c5300040" rw_flags="R" width="1" name="XDMAC_DMA_STATUS_I1" comment="DMA active status. 1 = active. 0 = idle"/>
    <register addr="c5300044" rw_flags="R" width="1" name="XDMAC_DMA_COUNT_I1" comment="Number of DMA list entries processed for the current operation."/>
  </block>
  <block name="zippy_bb" comment="ZIPPY BB control and status registers">
    <register addr="c5100000" rw_flags="RW" width="4" name="ZIPPY_BB_ADDR_CTRL" comment="ZIPPY remote register access address and controls. The bottom 16 bits of this register (PSEL and ADDR) are actually the bottom 16 bits of the byte address of the RFIC register to be accessed (from HTML docs for example)"/>
    <register addr="c5100004" rw_flags="RW" width="4" name="ZIPPY_BB_WRITE_DATA" comment="Data to write to remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred. Unwritten bytes are unchanged, if the destination register is larger than the number of bytes written"/>
    <register addr="c5100008" rw_flags="R" width="4" name="ZIPPY_BB_READ_DATA" comment="Data returned from the remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred"/>
    <register addr="c510000c" rw_flags="RW" width="4" name="ZIPPY_BB_TIMEOUTS" comment="Time out control for register read data and write acknowledges (if enabled) to be returned from the RF IC"/>
    <register addr="c5100010" rw_flags="RW" width="4" name="ZIPPY_BB_TRANSPORT" comment="ZIPPY baseband transport configuration. The matching configuration must also be set up in the RF chip"/>
    <register addr="c5100014" rw_flags="RW" width="1" name="ZIPPY_BB_PRIORITY_INC_RATE" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="c5100018" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS0_CFG" comment="Type 0 (BT) flag frame configuration"/>
    <register addr="c510001c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS1_CFG" comment="Type 1 (BT) flag frame configuration"/>
    <register addr="c5100020" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS2_CFG" comment="Type 2 (BT) flag frame configuration"/>
    <register addr="c5100024" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS3_CFG" comment="Type 3 (WLAN) flag frame configuration"/>
    <register addr="c5100028" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS4_CFG" comment="Type 4 (WLAN) flag frame configuration"/>
    <register addr="c510002c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS5_CFG" comment="Type 5 (WLAN) flag frame configuration"/>
    <register addr="c5100030" rw_flags="RW" width="4" name="ZIPPY_BB_DATA_CFG" comment="Address/data frame configuration and write ack mask"/>
    <register addr="c5100034" rw_flags="RW" width="4" name="ZIPPY_BB_INT_EN" comment="Interrupt sources enable."/>
    <register addr="c5100038" rw_flags="R" width="4" name="ZIPPY_BB_INT_STATUS" comment="Status of Interrupt sources."/>
    <register addr="c510003c" rw_flags="W" width="4" name="ZIPPY_BB_INT_CLEAR" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="c5100040" rw_flags="R" width="4" name="ZIPPY_BB_APB_STATUS" comment="Status of the RF IC register access"/>
    <register addr="c5100044" rw_flags="R" width="2" name="ZIPPY_BB_DATA_COUNTS" comment="Local BB counters for data from BB to RF and RF to BB. TO be compared with equivalent ones in the RFIC"/>
    <register addr="c5100048" rw_flags="RW" width="1" name="ZIPPY_BB_DEBUG_CTRL" comment="Control of Zippy debug and logging facilities"/>
    <register addr="c510004c" rw_flags="RW" width="1" name="ZIPPY_MUTEX" comment="Single resource mutual exclusion lock. "/>
    <register addr="c5100050" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_0" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="c5100054" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_0" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="c5100058" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_0" comment=" Sets the window Start of the Reservation window."/>
    <register addr="c510005c" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_1" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="c5100060" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_1" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="c5100064" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_1" comment=" Sets the window Start of the Reservation window."/>
    <register addr="c5100068" rw_flags="RW" width="1" name="ZIPPY_BB_DATA_CFG2" comment=" Sets the elevated REGS priority,"/>
  </block>
</subsystem>
